/*
 * Copyright 2024 Google LLC
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. The rights granted to you under the License
 * may not be used to create, or enable the creation or redistribution of,
 * unlawful or unlicensed copies of an Apple operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any
 * terms of an Apple operating system software license agreement.
 *
 * Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
 */

syntax = "proto2";

// This file contains constants for BSD enums and flags.
// Enums for other purposes (like to restrict fuzzed file
// descriptors) should go elsewhere (bsd_types.proto).

// If names conflict with internal ones, the convention
// is to prefix with FUZZED_.

enum MmapProt {
  PROT_READ = 1;
  PROT_WRITE = 2;
  PROT_EXEC = 4;
}

enum MsyncFlags {
  MS_ASYNC = 1;
  MS_INVALIDATE = 2;
  MS_SYNC = 16;
}

enum MmapFlags {
  MAP_FILE = 0;
  MAP_SHARED = 1;
  MAP_PRIVATE = 2;
  MAP_FIXED = 16;
  MAP_HASSEMAPHORE = 512;
  MAP_NOCACHE = 1024;
  MAP_JIT = 2048;
  MAP_ANON = 4096;
  MAP_32BIT = 32768;
}

enum MadviseFlags {
  MADV_NORMAL = 0;
  MADV_RANDOM = 1;
  MADV_SEQUENTIAL = 2;
  MADV_WILLNEED = 3;
  MADV_DONTNEED = 4;
  MADV_FREE = 5;
  MADV_ZERO_WIRED_PAGES = 6;
}

enum MlockallFlags {
  MCL_CURRENT = 1;
  MCL_FUTURE = 2;
}

enum ShmatFlags {
  SHM_RDONLY = 4096;
  SHM_RND = 8192;
}

enum PollfdEvents {
  option allow_alias = true;
  POLLIN = 1;
  POLLPRI = 2;
  POLLOUT = 4;
  POLLWRNORM = 4;
  POLLERR = 8;
  POLLHUP = 16;
  POLLNVAL = 32;
  POLLRDNORM = 64;
  POLLRDBAND = 128;
  POLLWRBAND = 256;
}

enum FlockOp {
  LOCK_SH = 1;
  LOCK_EX = 2;
  LOCK_NB = 4;
  LOCK_UN = 8;
}

enum AtFlags {
  AT_EACCESS = 16;
  AT_SYMLINK_NOFOLLOW = 32;
  AT_SYMLINK_FOLLOW = 64;
  AT_REMOVEDIR = 128;
}

enum GetitimerWhich {
  FUZZED_ITIMER_REAL = 0;
  FUZZED_ITIMER_VIRTUAL = 1;
  FUZZED_ITIMER_PROF = 2;
}

enum WaitOptions {
  FUZZED_WNOHANG = 1;
  FUZZED_WUNTRACED = 2;
  FUZZED_WEXITED = 4;
  FUZZED_WSTOPPED = 8;
  FUZZED_WCONTINUED = 16;
  FUZZED_WNOWAIT = 32;
}

enum FcntlDupfd {
  F_DUPFD = 0;
  F_DUPFD_CLOEXEC = 67;
}

enum FcntlGetflags {
  F_GETFD = 1;
  F_GETFL = 3;
}

enum FcntlLock {
  F_GETLK = 7;
  F_SETLK = 8;
  F_SETLKW = 9;
}

enum FcntlFlags {
  FD_CLOEXEC = 1;
}

enum FlockType {
  F_RDLCK = 1;
  F_UNLCK = 2;
  F_WRLCK = 3;
}

enum ChflagsFlags {
  SF_ARCHIVED = 65536;
  SF_IMMUTABLE = 131072;
  SF_APPEND = 262144;
  SF_NOUNLINK = 1048576;
}

enum OpenFlags {
  O_RDONLY = 0;
  O_WRONLY = 1;
  O_RDWR = 2;
  O_NONBLOCK = 4;
  O_APPEND = 8;
  O_SHLOCK = 16;
  O_EXLOCK = 32;
  O_NOFOLLOW = 256;
  O_CREAT = 512;
  O_TRUNC = 1024;
  O_EXCL = 2048;
  O_EVTONLY = 32768;
  O_SYMLINK = 2097152;
  O_CLOEXEC = 16777216;
  O_NOFOLLOW_ANY = 536870912;
}

enum PermissionMode {
  S_IXOTH = 1;
  S_IWOTH = 2;
  S_IROTH = 4;
  S_IXGRP = 8;
  S_IWGRP = 16;
  S_IRGRP = 32;
  S_IXUSR = 64;
  S_IWUSR = 128;
  S_IRUSR = 256;
}

enum SeekWhence {
  FUZZED_SEEK_SET = 0;
  FUZZED_SEEK_CUR = 1;
  FUZZED_SEEK_END = 2;
  FUZZED_SEEK_HOLE = 3;
  FUZZED_SEEK_DATA = 4;
}

enum ConfValue {
  FUZZED_PC_LINK_MAX = 1;
  FUZZED_PC_MAX_CANON = 2;
  FUZZED_PC_MAX_INPUT = 3;
  FUZZED_PC_NAME_MAX = 4;
  FUZZED_PC_PATH_MAX = 5;
  FUZZED_PC_PIPE_BUF = 6;
  FUZZED_PC_CHOWN_RESTRICTED = 7;
  FUZZED_PC_NO_TRUNC = 8;
  FUZZED_PC_VDISABLE = 9;
  FUZZED_PC_XATTR_SIZE_BITS = 26;
  FUZZED_PC_MIN_HOLE_SIZE = 27;
}

// TODO(nwach): Can this comment be trusted? Merge with other types below.
// Currently has only one type supported in XNU
enum Ip6RtType {
  IPV6_RTHDR_TYPE_0 = 0;
}

enum Fflags {
  option allow_alias = true;
  NOTE_FFNOP = 0;
  NOTE_DELETE = 1;
  NOTE_LOWAT = 1;
  NOTE_SECONDS = 1;
  NOTE_TRACK = 1;
  NOTE_USECONDS = 2;
  NOTE_WRITE = 2;
  NOTE_EXTEND = 4;
  NOTE_NSECONDS = 4;
  NOTE_ATTRIB = 8;
  NOTE_LINK = 16;
  NOTE_RENAME = 32;
  NOTE_REVOKE = 64;
  // TODO(nwach): These values are out of range of int32.
  //NOTE_FFLAGSMASK = 16777215;
  //NOTE_TRIGGER = 16777216;
  //NOTE_EXEC = 536870912;
  //NOTE_FFAND = 1073741824;
  //NOTE_FORK = 1073741824;
  //NOTE_EXIT = 2147483648;
  //NOTE_FFOR = 2147483648;
  //NOTE_FFCOPY = 3221225472;
  //NOTE_FFCTRLMASK = 3221225472;
}

enum SocketType {
  SOCK_STREAM = 1;
  SOCK_DGRAM = 2;
  SOCK_RAW = 3;
  SOCK_RDM = 4;
  SOCK_SEQPACKET = 5;
}

enum ShutdownHow {
  SHUT_RD = 0;
  SHUT_WR = 1;
  SHUT_RDWR = 2;
}

enum MsgFlags {
  MSG_OOB = 1;
  MSG_PEEK = 2;
  MSG_DONTROUTE = 4;
  MSG_EOR = 8;
  MSG_WAITALL = 64;
  MSG_DONTWAIT = 128;
  MSG_EOF = 256;
}

enum ConnectXFlag {
  CONNECT_RESUME_ON_READ_WRITE = 1;
  CONNECT_DATA_IDEMPOTENT = 2;
  CONNECT_DATA_AUTHENTICATED = 4;
}

enum NecpOpenFlag {
  NECP_OPEN_FLAG_OBSERVER = 1;
  NECP_OPEN_FLAG_BACKGROUND = 2;
  NECP_OPEN_FLAG_PUSH_OBSERVER = 4;
}

enum NecpClientActionNumber {
  NECP_CLIENT_ACTION_ADD = 1;
  NECP_CLIENT_ACTION_REMOVE = 2;
  NECP_CLIENT_ACTION_COPY_PARAMETERS = 3;
  NECP_CLIENT_ACTION_COPY_RESULT = 4;
  NECP_CLIENT_ACTION_COPY_LIST = 5;
  NECP_CLIENT_ACTION_REQUEST_NEXUS_INSTANCE = 6;
  NECP_CLIENT_ACTION_AGENT = 7;
  NECP_CLIENT_ACTION_COPY_AGENT = 8;
  NECP_CLIENT_ACTION_COPY_INTERFACE = 9;
  NECP_CLIENT_ACTION_SET_STATISTICS = 10;
  NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS = 11;
  NECP_CLIENT_ACTION_AGENT_USE = 12;
  NECP_CLIENT_ACTION_MAP_SYSCTLS = 13;
  NECP_CLIENT_ACTION_UPDATE_CACHE = 14;
  NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE = 15;
  NECP_CLIENT_ACTION_COPY_UPDATED_RESULT = 16;
  NECP_CLIENT_ACTION_ADD_FLOW = 17;
  NECP_CLIENT_ACTION_REMOVE_FLOW = 18;
}

enum NecpSessionActionNumber {
  NECP_SESSION_ACTION_POLICY_ADD = 1;
  NECP_SESSION_ACTION_POLICY_GET = 2;
  NECP_SESSION_ACTION_POLICY_DELETE = 3;
  NECP_SESSION_ACTION_POLICY_APPLY_ALL = 4;
  NECP_SESSION_ACTION_POLICY_LIST_ALL = 5;
  NECP_SESSION_ACTION_POLICY_DELETE_ALL = 6;
  NECP_SESSION_ACTION_SET_SESSION_PRIORITY = 7;
  NECP_SESSION_ACTION_LOCK_SESSION_TO_PROC = 8;
  NECP_SESSION_ACTION_REGISTER_SERVICE = 9;
  NECP_SESSION_ACTION_UNREGISTER_SERVICE = 10;
  NECP_SESSION_ACTION_POLICY_DUMP_ALL = 11;
}

enum IfruFlag {
  IFF_UP = 1;
  IFF_BROADCAST = 2;
  IFF_DEBUG = 4;
  IFF_LOOPBACK = 8;
  IFF_POINTOPOINT = 16;
  IFF_NOTRAILERS = 32;
  IFF_RUNNING = 64;
  IFF_NOARP = 128;
  IFF_PROMISC = 256;
  IFF_ALLMULTI = 512;
  IFF_OACTIVE = 1024;
  IFF_SIMPLEX = 2048;
  IFF_LINK0 = 4096;
  IFF_LINK1 = 8192;
  IFF_LINK2 = 16384;
  IFF_MULTICAST = 32768;
}

enum IfraFlag {
  IN6_IFF_ANYCAST = 1;      // anycast address
  IN6_IFF_TENTATIVE = 2;    // tentative address
  IN6_IFF_DUPLICATED = 4;   // DAD detected duplicate
  IN6_IFF_DETACHED = 8;     // may be detached from the link
  IN6_IFF_DEPRECATED = 16;  // deprecated address
  IN6_IFF_NODAD = 32;
  IN6_IFF_AUTOCONF = 64;     // autoconfigurable address.
  IN6_IFF_TEMPORARY = 128;   // temporary (anonymous) address.
  IN6_IFF_DYNAMIC = 256;     // assigned by DHCPv6 service
  IN6_IFF_OPTIMISTIC = 512;  // optimistic DAD, i.e. RFC 4429
  IN6_IFF_SECURED = 1024;    // cryptographically generated
  IN6_IFF_SWIFTDAD = 2048;   // DAD with no delay
  IN6_IFF_CLAT46 = 4096;     // Address reserved for CLAT46
  IN6_IFF_NOPFX = 32768;     // Depreciated. Don't use.
}

enum Icmp6Type {
  ICMP6_DST_UNREACH = 1;           // dest unreachable, codes:
  ICMP6_PACKET_TOO_BIG = 2;        // packet too big
  ICMP6_TIME_EXCEEDED = 3;         // time exceeded, code:
  ICMP6_PARAM_PROB = 4;            // ip6 header bad
  ICMP6_ECHO_REQUEST = 128;        // echo service
  ICMP6_ECHO_REPLY = 129;          // echo reply
  MLD_LISTENER_QUERY = 130;        // multicast listener query
  MLD_LISTENER_REPORT = 131;       // multicast listener report
  MLD_LISTENER_DONE = 132;         // multicast listener done
  ND_ROUTER_SOLICIT = 133;         // router solicitation
  ND_ROUTER_ADVERT = 134;          // router advertisement
  ND_NEIGHBOR_SOLICIT = 135;       // neighbor solicitation
  ND_NEIGHBOR_ADVERT = 136;        // neighbor advertisement
  ND_REDIRECT = 137;               // redirect
  ICMP6_ROUTER_RENUMBERING = 138;  // router renumbering
  ICMP6_WRUREQUEST = 139;          // who are you request
  ICMP6_WRUREPLY = 140;            // who are you reply
  MLDV2_LISTENER_REPORT = 143;     // RFC3810 listener report
  MLD_MTRACE_RESP = 200;           // mtrace resp (to sender)
  MLD_MTRACE = 201;                // mtrace messages
}

enum Icmp6Code {
  ICMP6_DST_UNREACH_NOROUTE = 0;                // no route to destination
  ICMP6_DST_UNREACH_ADMIN = 1;                  // administratively prohibited
  ICMP6_DST_UNREACH_NOTNEIGHBOR = 2;            // not a neighbor(obsolete)
  ICMP6_DST_UNREACH_ADDR = 3;                   // address unreachable
  ICMP6_DST_UNREACH_NOPORT = 4;                 // port unreachable
  ICMP6_INFOMSG_MASK = 128;                     // all informational messages
  ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET = 255;  // rr seq num reset
}

enum TcpFlag {
  TH_FIN = 1;
  TH_SYN = 2;
  TH_RST = 4;
  TH_PUSH = 8;
  TH_ACK = 16;
  TH_URG = 32;
  TH_ECE = 64;
  TH_CWR = 128;
}

// TODO(nedwill): review all commented (potentially nondeterministic) ioctls
// to ensure determinism on each loop with manual cleanup
enum IoctlIdx {
  SIOCSHIWAT = 1;
  SIOCGHIWAT = 2;
  SIOCSLOWAT = 3;
  SIOCGLOWAT = 4;
  SIOCATMARK = 5;
  SIOCSPGRP = 6;
  SIOCGPGRP = 7;
  SIOCSIFADDR = 8;
  OSIOCGIFADDR = 9;
  SIOCSIFDSTADDR = 10;
  OSIOCGIFDSTADDR = 11;
  SIOCSIFFLAGS = 12;
  SIOCGIFFLAGS = 13;
  OSIOCGIFBRDADDR = 14;
  SIOCSIFBRDADDR = 15;
  OSIOCGIFCONF = 16;
  OSIOCGIFCONF32 = 17;
  OSIOCGIFCONF64 = 18;
  OSIOCGIFNETMASK = 19;
  SIOCSIFNETMASK = 20;
  SIOCGIFMETRIC = 21;
  SIOCSIFMETRIC = 22;
  SIOCDIFADDR = 23;
  SIOCAIFADDR = 24;
  SIOCGIFADDR = 25;
  SIOCGIFDSTADDR = 26;
  SIOCGIFBRDADDR = 27;
  SIOCGIFCONF = 28;
  SIOCGIFCONF32 = 29;
  SIOCGIFCONF64 = 30;
  SIOCGIFNETMASK = 31;
  SIOCADDMULTI = 32;
  SIOCDELMULTI = 33;
  SIOCGIFMTU = 34;
  SIOCSIFMTU = 35;
  SIOCGIFPHYS = 36;
  SIOCSIFPHYS = 37;
  SIOCSIFMEDIA = 38;
  SIOCGIFMEDIA = 39;
  SIOCGIFMEDIA32 = 40;
  SIOCGIFMEDIA64 = 41;
  SIOCSIFGENERIC = 42;
  SIOCGIFGENERIC = 43;
  SIOCSIFLLADDR = 44;
  SIOCGIFSTATUS = 45;
  SIOCSIFPHYADDR = 46;
  SIOCGIFPSRCADDR = 47;
  SIOCGIFPDSTADDR = 48;
  SIOCDIFPHYADDR = 49;
  SIOCGIFDEVMTU = 50;
  SIOCSIFALTMTU = 51;
  SIOCPROTOATTACH = 52;
  SIOCPROTODETACH = 53;
  SIOCIFCREATE = 54;
  SIOCIFDESTROY = 55;
  SIOCSIFVLAN = 56;
  SIOCGIFVLAN = 57;
  SIOCSETVLAN = 58;
  SIOCGETVLAN = 59;
  SIOCSIFDEVMTU = 60;
  SIOCIFGCLONERS = 61;
  SIOCIFGCLONERS32 = 62;
  SIOCIFGCLONERS64 = 63;
  SIOCGIFASYNCMAP = 64;
  SIOCSIFASYNCMAP = 65;
  SIOCSIFKPI = 66;
  SIOCGIFKPI = 67;
  SIOCGIFWAKEFLAGS = 68;
  SIOCGIFGETRTREFCNT = 69;
  SIOCGIFLINKQUALITYMETRIC = 70;
  SIOCSETROUTERMODE = 71;
  SIOCGIFEFLAGS = 72;
  SIOCSIFDESC = 73;
  SIOCGIFDESC = 74;
  SIOCSIFLINKPARAMS = 75;
  SIOCGIFLINKPARAMS = 76;
  SIOCGIFQUEUESTATS = 77;
  SIOCSIFTHROTTLE = 78;
  SIOCGIFTHROTTLE = 79;
  SIOCGASSOCIDS = 80;
  SIOCGCONNIDS = 81;
  SIOCGCONNINFO = 82;
  SIOCGASSOCIDS32 = 83;
  SIOCGASSOCIDS64 = 84;
  SIOCGCONNIDS32 = 85;
  SIOCGCONNIDS64 = 86;
  SIOCGCONNINFO32 = 87;
  SIOCGCONNINFO64 = 88;
  SIOCSCONNORDER = 89;
  SIOCGCONNORDER = 90;
  SIOCSIFLOG = 91;
  SIOCGIFLOG = 92;
  SIOCGIFDELEGATE = 93;
  SIOCGIFLLADDR = 94;
  SIOCGIFTYPE = 95;
  SIOCGIFEXPENSIVE = 96;
  SIOCSIFEXPENSIVE = 97;
  SIOCGIF2KCL = 98;
  SIOCSIF2KCL = 99;
  SIOCGSTARTDELAY = 100;
  SIOCAIFAGENTID = 101;
  SIOCDIFAGENTID = 102;
  SIOCGIFAGENTIDS = 103;
  SIOCGIFAGENTDATA = 104;
  SIOCGIFAGENTIDS32 = 105;
  SIOCGIFAGENTIDS64 = 106;
  SIOCGIFAGENTDATA32 = 107;
  SIOCGIFAGENTDATA64 = 108;
  SIOCSIFINTERFACESTATE = 109;
  SIOCGIFINTERFACESTATE = 110;
  SIOCSIFPROBECONNECTIVITY = 111;
  SIOCGIFPROBECONNECTIVITY = 112;
  SIOCGIFFUNCTIONALTYPE = 113;
  SIOCSIFNETSIGNATURE = 114;
  SIOCGIFNETSIGNATURE = 115;
  SIOCGECNMODE = 116;
  SIOCSECNMODE = 117;
  SIOCSIFORDER = 118;
  SIOCGIFORDER = 119;
  SIOCSQOSMARKINGMODE = 120;
  SIOCSFASTLANECAPABLE = 121;
  SIOCSQOSMARKINGENABLED = 122;
  SIOCSFASTLEENABLED = 123;
  SIOCGQOSMARKINGMODE = 124;
  SIOCGQOSMARKINGENABLED = 125;
  SIOCSIFTIMESTAMPENABLE = 126;
  SIOCSIFTIMESTAMPDISABLE = 127;
  SIOCGIFTIMESTAMPENABLED = 128;
  SIOCSIFDISABLEOUTPUT = 129;
  SIOCGIFAGENTLIST = 130;
  SIOCGIFAGENTLIST32 = 131;
  SIOCGIFAGENTLIST64 = 132;
  SIOCSIFLOWINTERNET = 133;
  SIOCGIFLOWINTERNET = 134;
  SIOCGIFNAT64PREFIX = 135;
  SIOCSIFNAT64PREFIX = 136;
  SIOCGIFNEXUS = 137;
  SIOCSIFADDR_IN6 = 138;
  SIOCGIFADDR_IN6 = 139;
  SIOCSIFDSTADDR_IN6 = 140;
  SIOCSIFNETMASK_IN6 = 141;
  SIOCGIFDSTADDR_IN6 = 142;
  SIOCGIFNETMASK_IN6 = 143;
  SIOCDIFADDR_IN6 = 144;
  SIOCAIFADDR_IN6 = 145;
  SIOCAIFADDR_IN6_32 = 146;
  SIOCAIFADDR_IN6_64 = 147;
  SIOCSIFPHYADDR_IN6 = 148;
  SIOCSIFPHYADDR_IN6_32 = 149;
  SIOCSIFPHYADDR_IN6_64 = 150;
  SIOCGIFPSRCADDR_IN6 = 151;
  SIOCGIFPDSTADDR_IN6 = 152;
  SIOCGIFAFLAG_IN6 = 153;
  SIOCGDRLST_IN6 = 154;
  SIOCGDRLST_IN6_32 = 155;
  SIOCGDRLST_IN6_64 = 156;
  SIOCGPRLST_IN6 = 157;
  SIOCGPRLST_IN6_32 = 158;
  SIOCGPRLST_IN6_64 = 159;
  OSIOCGIFINFO_IN6 = 160;
  SIOCGIFINFO_IN6 = 161;
  SIOCSNDFLUSH_IN6 = 162;
  SIOCGNBRINFO_IN6 = 163;
  SIOCGNBRINFO_IN6_32 = 164;
  SIOCGNBRINFO_IN6_64 = 165;
  SIOCSPFXFLUSH_IN6 = 166;
  SIOCSRTRFLUSH_IN6 = 167;
  SIOCGIFALIFETIME_IN6 = 168;
  SIOCSIFALIFETIME_IN6 = 169;
  SIOCGIFSTAT_IN6 = 170;
  SIOCGIFSTAT_ICMP6 = 171;
  SIOCSDEFIFACE_IN6 = 172;
  SIOCGDEFIFACE_IN6 = 173;
  SIOCSDEFIFACE_IN6_32 = 174;
  SIOCSDEFIFACE_IN6_64 = 175;
  SIOCGDEFIFACE_IN6_32 = 176;
  SIOCGDEFIFACE_IN6_64 = 177;
  SIOCSIFINFO_FLAGS = 178;
  SIOCSSCOPE6 = 179;
  SIOCGSCOPE6 = 180;
  SIOCGSCOPE6DEF = 181;
  SIOCSIFPREFIX_IN6 = 182;
  SIOCGIFPREFIX_IN6 = 183;
  SIOCDIFPREFIX_IN6 = 184;
  SIOCAIFPREFIX_IN6 = 185;
  SIOCCIFPREFIX_IN6 = 186;
  SIOCSGIFPREFIX_IN6 = 187;
  SIOCAADDRCTL_POLICY = 188;
  SIOCDADDRCTL_POLICY = 189;
  SIOCPROTOATTACH_IN6 = 190;
  SIOCPROTOATTACH_IN6_32 = 191;
  SIOCPROTOATTACH_IN6_64 = 192;
  SIOCPROTODETACH_IN6 = 193;
  SIOCLL_START = 194;
  SIOCLL_START_32 = 195;
  SIOCLL_START_64 = 196;
  SIOCLL_STOP = 197;
  SIOCAUTOCONF_START = 198;
  SIOCAUTOCONF_STOP = 199;
  SIOCDRADD_IN6 = 200;
  SIOCDRADD_IN6_32 = 201;
  SIOCDRADD_IN6_64 = 202;
  SIOCDRDEL_IN6 = 203;
  SIOCDRDEL_IN6_32 = 204;
  SIOCDRDEL_IN6_64 = 205;
  SIOCSETROUTERMODE_IN6 = 206;
  SIOCLL_CGASTART = 207;
  SIOCLL_CGASTART_32 = 208;
  SIOCLL_CGASTART_64 = 209;
  SIOCGIFCGAPREP_IN6 = 210;
  SIOCSIFCGAPREP_IN6 = 211;
  DIOCSTART = 212;
  DIOCSTOP = 213;
  DIOCADDRULE = 214;
  DIOCGETSTARTERS = 215;
  DIOCGETRULES = 216;
  DIOCGETRULE = 217;
  DIOCSTARTREF = 218;
  DIOCSTOPREF = 219;
  DIOCCLRSTATES = 220;
  DIOCGETSTATE = 221;
  DIOCSETSTATUSIF = 222;
  DIOCGETSTATUS = 223;
  DIOCCLRSTATUS = 224;
  DIOCNATLOOK = 225;
  DIOCSETDEBUG = 226;
  DIOCGETSTATES = 227;
  DIOCCHANGERULE = 228;
  DIOCINSERTRULE = 229;
  DIOCDELETERULE = 230;
  DIOCSETTIMEOUT = 231;
  DIOCGETTIMEOUT = 232;
  DIOCADDSTATE = 233;
  DIOCCLRRULECTRS = 234;
  DIOCGETLIMIT = 235;
  DIOCSETLIMIT = 236;
  DIOCKILLSTATES = 237;
  DIOCSTARTALTQ = 238;
  DIOCSTOPALTQ = 239;
  DIOCADDALTQ = 240;
  DIOCGETALTQS = 241;
  DIOCGETALTQ = 242;
  DIOCCHANGEALTQ = 243;
  DIOCGETQSTATS = 244;
  DIOCBEGINADDRS = 245;
  DIOCADDADDR = 246;
  DIOCGETADDRS = 247;
  DIOCGETADDR = 248;
  DIOCCHANGEADDR = 249;
  DIOCGETRULESETS = 250;
  DIOCGETRULESET = 251;
  DIOCRCLRTABLES = 252;
  DIOCRADDTABLES = 253;
  DIOCRDELTABLES = 254;
  DIOCRGETTABLES = 255;
  DIOCRGETTSTATS = 256;
  DIOCRCLRTSTATS = 257;
  DIOCRCLRADDRS = 258;
  DIOCRADDADDRS = 259;
  DIOCRDELADDRS = 260;
  DIOCRSETADDRS = 261;
  DIOCRGETADDRS = 262;
  DIOCRGETASTATS = 263;
  DIOCRCLRASTATS = 264;
  DIOCRTSTADDRS = 265;
  DIOCRSETTFLAGS = 266;
  DIOCRINADEFINE = 267;
  DIOCOSFPFLUSH = 268;
  DIOCOSFPADD = 269;
  DIOCOSFPGET = 270;
  DIOCXBEGIN = 271;
  DIOCXCOMMIT = 272;
  DIOCXROLLBACK = 273;
  DIOCGETSRCNODES = 274;
  DIOCCLRSRCNODES = 275;
  DIOCSETHOSTID = 276;
  DIOCIGETIFACES = 277;
  DIOCSETIFFLAG = 278;
  DIOCCLRIFFLAG = 279;
  DIOCKILLSRCNODES = 280;
  DIOCGIFSPEED = 281;
}

// TODO(nedwill): clean these up, see if more headers have socket options
enum SocketOptName {
  option allow_alias = true;
  // socket.h
  SO_DEBUG = 1;         // turn on debugging info recording
  SO_ACCEPTCONN = 2;    // socket has had listen()
  SO_REUSEADDR = 4;     // allow local address reuse
  SO_KEEPALIVE = 8;     // keep connections alive
  SO_DONTROUTE = 16;    // just use interface addresses
  SO_BROADCAST = 32;    // permit sending of broadcast msgs
  SO_USELOOPBACK = 64;  // bypass hardware when possible
  SO_LINGER = 128;      // linger on close if data present (in ticks)
  // SO_LINGER_SEC = 0x1080;  // linger on close if data present (in seconds)
  SO_OOBINLINE = 256;   // leave received OOB data in line
  SO_REUSEPORT = 512;   // allow local address & port reuse
  SO_TIMESTAMP = 1024;  // timestamp received dgram traffic
  SO_TIMESTAMP_MONOTONIC =
      2048;                // Monotonically increasing timestamp on rcvd dgram
  SO_ACCEPTFILTER = 4096;  // there is an accept filter
  SO_DONTTRUNC = 8192;     // APPLE: Retain unread data
  SO_WANTMORE = 16384;     // APPLE: Give hint when more data ready
  SO_WANTOOBFLAG = 32768;  // APPLE: Want OOB in MSG_FLAG on receive
  SO_NOWAKEFROMSLEEP = 65536;  // Don't wake for traffic to this socket
  SO_NOAPNFALLBK = 131072;     // Don't attempt APN fallback for the socket
  SO_TIMESTAMP_CONTINUOUS =
      262144;           // Continuous monotonic timestamp on rcvd dgram
  SO_SNDBUF = 4097;     // send buffer size
  SO_RCVBUF = 4098;     // receive buffer size
  SO_SNDLOWAT = 4099;   // send low-water mark
  SO_RCVLOWAT = 4100;   // receive low-water mark
  SO_SNDTIMEO = 4101;   // send timeout
  SO_RCVTIMEO = 4102;   // receive timeout
  SO_ERROR = 4103;      // get error status and clear
  SO_TYPE = 4104;       // get socket type
  SO_LABEL = 4112;      // socket's MAC label
  SO_PEERLABEL = 4113;  // socket's peer MAC label
  SO_NREAD = 4128;      // APPLE: get 1st-packet byte count
  SO_NKE = 4129;        // APPLE: Install socket-level NKE
  SO_NOSIGPIPE = 4130;  // APPLE: No SIGPIPE on EPIPE
  SO_NOADDRERR =
      4131;  // APPLE: Returns EADDRNOTAVAIL when src is not available anymore
  SO_NWRITE =
      4132;  // APPLE: Get number of bytes currently in send socket buffer
  SO_REUSESHAREUID =
      4133;  // APPLE: Allow reuse of port/socket by different userids
  SO_NOTIFYCONFLICT = 4134;  // APPLE: send notification if there is a bind on a
                             // port which is already in use
  SO_UPCALLCLOSEWAIT = 4135;  // APPLE: block on close until an upcall returns
  SO_LINGER_SEC = 4224;       // linger on close if data present (in seconds)
  SO_RESTRICTIONS = 4225;     // APPLE: deny flag set
  // SO_RESTRICT_DENY_IN = 0x1; /* deny inbound (trapdoor) */
  // SO_RESTRICT_DENY_OUT = 0x2; /* deny outbound (trapdoor) */
  // SO_RESTRICT_DENY_CELLULAR = 0x4; /* deny use of cellular (trapdoor) */
  // SO_RESTRICT_DENY_EXPENSIVE = 0x8; /* deny use of expensive if (trapdoor)
  SO_RANDOMPORT = 4226;     // APPLE: request local port randomization
  SO_NP_EXTENSIONS = 4227;  // To turn off some POSIX behavior
  SO_EXECPATH = 4229;       // Application Firewall Socket option
  SO_TRAFFIC_CLASS = 4230;  // Traffic service class (int)
  SO_TC_BK_SYS = 100;       // lowest class
  SO_TC_BK = 200;
  SO_TC_BE = 0;
  SO_TC_RD = 300;
  SO_TC_OAM = 400;
  SO_TC_AV = 500;
  SO_TC_RV = 600;
  SO_TC_VI = 700;
  SO_TC_VO = 800;
  SO_TC_CTL = 900;                     // highest class
  SO_TC_MAX = 10;                      // Total # of traffic classes
  SO_TC_UNSPEC = -1;                   // Traffic class not specified
  SO_RECV_TRAFFIC_CLASS = 4231;        // Receive traffic class (bool)
  SO_TRAFFIC_CLASS_DBG = 4232;         // Debug traffic class (struct so_tcdbg)
  SO_TRAFFIC_CLASS_STATS = 4233;       // Traffic class statistics
  SO_PRIVILEGED_TRAFFIC_CLASS = 4240;  // Privileged traffic class (bool)
  SO_DEFUNCTIT = 4241;      // Defunct a socket (only in internal builds)
  SO_DEFUNCTOK = 4352;      // can be defunct'd
  SO_ISDEFUNCT = 4353;      // get defunct status
  SO_OPPORTUNISTIC = 4354;  // deprecated; use SO_TRAFFIC_CLASS
  SO_FLUSH = 4355;          // flush unsent data (int)
  SO_RECV_ANYIF = 4356;     // unrestricted inbound processing
  SO_TRAFFIC_MGT_BACKGROUND = 4357;  // Background traffic management
  SO_FLOW_DIVERT_TOKEN = 4358;       // flow divert token
  SO_DELEGATED = 4359;               // set socket as delegate (pid_t)
  SO_DELEGATED_UUID = 4360;          // set socket as delegate (uuid_t)
  SO_NECP_ATTRIBUTES = 4361;  // NECP socket attributes (domain, account, etc.)
  SO_CFIL_SOCK_ID = 4368;     // get content filter socket ID (cfil_sock_id_t)
  SO_NECP_CLIENTUUID = 4369;  // NECP Client uuid
  SO_NUMRCVPKT = 4370;        // number of datagrams in receive socket buffer
  SO_AWDL_UNRESTRICTED = 4371;  // try to use AWDL in restricted mode
  SO_EXTENDED_BK_IDLE =
      4372;  // extended time to keep socket idle after app is suspended (int)
  SO_MARK_CELLFALLBACK = 4373;           // Mark as initiated by cell fallback
  SO_NET_SERVICE_TYPE = 4374;            // Network service type
  SO_QOSMARKING_POLICY_OVERRIDE = 4375;  // int
  SO_INTCOPROC_ALLOW = 4376;  // Try to use internal co-processor interfaces.
  SO_TC_NET_SERVICE_OFFSET = 10000;
  SO_NETSVC_MARKING_LEVEL = 4377;  // Get QoS marking in effect for socket
  // tcp.h
  TCPOPT_EOL = 0;
  TCPOPT_NOP = 1;
  TCPOPT_MAXSEG = 2;
  TCPOLEN_MAXSEG = 4;
  TCPOPT_WINDOW = 3;
  TCPOLEN_WINDOW = 3;
  TCPOPT_SACK_PERMITTED = 4;  // Experimental
  TCPOLEN_SACK_PERMITTED = 2;
  TCPOPT_SACK = 5;   // Experimental
  TCPOLEN_SACK = 8;  // len of sack block
  TCPOPT_TIMESTAMP = 8;
  TCPOLEN_TIMESTAMP = 10;
  MAX_TCPOPTLEN = 40;  // Absolute maximum TCP options len
  TCPOPT_CC = 11;      // CC options: RFC-1644
  TCPOPT_CCNEW = 12;
  TCPOPT_CCECHO = 13;
  TCPOLEN_CC = 6;
  TCPOPT_SIGNATURE = 19;  // Keyed MD5: RFC 2385
  TCPOLEN_SIGNATURE = 18;
  TCPOPT_MULTIPATH = 30;
  TCPOPT_FASTOPEN = 34;
  TCPOLEN_FASTOPEN_REQ = 2;
  MAX_SACK_BLKS = 6;  // Max # SACK blocks stored at sender side
  TCP_MAX_SACK = 4;   // MAX # SACKs sent in any segment
  TCP_MSS = 512;
  TCP_MINMSS = 216;
  TCP6_MSS = 1024;
  TCP_MAXWIN = 65535;          // largest value for (unscaled) window
  TTCP_CLIENT_SND_WND = 4096;  // dflt send window for T/TCP client
  TCP_MAX_WINSHIFT = 14;       // maximum window shift
  TCP_NODELAY = 1;             // don't delay send to coalesce packets
  TCP_MAXSEG = 2;              // set maximum segment size
  TCP_NOPUSH = 4;              // don't push last block of write
  TCP_NOOPT = 8;               // don't use TCP options
  TCP_KEEPALIVE = 16;          // idle time used when SO_KEEPALIVE is enabled
  TCP_CONNECTIONTIMEOUT = 32;  // connection timeout
  PERSIST_TIMEOUT = 64;
  TCP_RXT_CONNDROPTIME = 128;
  TCP_RXT_FINDROP = 256;
  TCP_KEEPINTVL = 257;         // interval between keepalives
  TCP_KEEPCNT = 258;           // number of keepalives before close
  TCP_SENDMOREACKS = 259;      // always ack every other packet
  TCP_ENABLE_ECN = 260;        // Enable ECN on a connection
  TCP_FASTOPEN = 261;          // Enable/Disable TCP Fastopen on this socket
  TCP_CONNECTION_INFO = 262;   // State of TCP connection
  TCP_INFO = 512;              // retrieve tcp_info structure
  TCP_MEASURE_SND_BW = 514;    // Measure sender's bandwidth for this connection
  TCP_NOTSENT_LOWAT = 513;     // Low water mark for TCP unsent data
  TCP_MEASURE_BW_BURST = 515;  // Burst size to use for bandwidth measurement
  TCP_PEER_PID = 516;          // Lookup pid of the process we're connected to
  TCP_ADAPTIVE_READ_TIMEOUT = 517;  // Read timeout used as a multiple of RTT
  TCP_ENABLE_MSGS = 518;
  TCP_ADAPTIVE_WRITE_TIMEOUT = 519;  // Write timeout used as a multiple of RTT
  TCP_NOTIMEWAIT = 520;              // Avoid going into time-wait
  TCP_DISABLE_BLACKHOLE_DETECTION = 521;  // disable PMTU blackhole detection
  TCP_ECN_MODE = 528;                     // fine grain control for A/B testing
  TCP_KEEPALIVE_OFFLOAD = 529;  // offload keep alive processing to firmware
  ECN_MODE_DEFAULT = 0;         // per interface or system wide default
  ECN_MODE_ENABLE = 1;          // force enable ECN on connection
  ECN_MODE_DISABLE = 2;         // force disable ECN on connection
  TCP_MAX_NOTIFY_ACK = 10;
  TCP_NOTIFY_ACKNOWLEDGEMENT = 530;  // Notify when data is acknowledged
  MPTCP_SERVICE_TYPE = 531;          // MPTCP Service type
  TCP_FASTOPEN_FORCE_HEURISTICS =
      532;                     // Make sure TFO-heuristics never get disabled
  MPTCP_SVCTYPE_HANDOVER = 0;  // Default 0
  MPTCP_SVCTYPE_INTERACTIVE = 1;
  MPTCP_SVCTYPE_AGGREGATE = 2;
  MPTCP_SVCTYPE_MAX = 3;
  TCP_RXT_MINIMUM_TIMEOUT = 533;
  MPTCP_ALTERNATE_PORT = 534;
  TCPI_OPT_TIMESTAMPS = 1;
  TCPI_OPT_SACK = 2;
  TCPI_OPT_WSCALE = 4;
  TCPI_OPT_ECN = 8;
  TCPI_FLAG_LOSSRECOVERY = 1;  // Currently in loss recovery
  TCPI_FLAG_STREAMING_ON = 2;  // Streaming detection on
  CONNINFO_MPTCP_VERSION = 3;
  MPTCP_ITFSTATS_SIZE = 4;
  MPTCPCI_FIRSTPARTY = 1;
  TCPCI_OPT_TIMESTAMPS = 1;  // Timestamps enabled
  TCPCI_OPT_SACK = 2;        // SACK enabled
  TCPCI_OPT_WSCALE = 4;      // Window scaling enabled
  TCPCI_OPT_ECN = 8;         // ECN enabled
  TCPCI_FLAG_LOSSRECOVERY = 1;
  TCPCI_FLAG_REORDERING_DETECTED = 2;
  // in.h
  IP_OPTIONS = 1;           // buf/ip_opts; set/get IP options
  IP_HDRINCL = 2;           // int; header is included with data
  IP_TOS = 3;               // int; IP type of service and preced.
  IP_TTL = 4;               // int; IP time to live
  IP_RECVOPTS = 5;          // bool; receive all IP opts w/dgram
  IP_RECVRETOPTS = 6;       // bool; receive IP opts for response
  IP_RECVDSTADDR = 7;       // bool; receive IP dst addr w/dgram
  IP_RETOPTS = 8;           // ip_opts; set/get IP options
  IP_MULTICAST_IF = 9;      // u_char; set/get IP multicast i/f
  IP_MULTICAST_TTL = 10;    // u_char; set/get IP multicast ttl
  IP_MULTICAST_LOOP = 11;   // u_char; set/get IP multicast loopback
  IP_ADD_MEMBERSHIP = 12;   // ip_mreq; add an IP group membership
  IP_DROP_MEMBERSHIP = 13;  // ip_mreq; drop an IP group membership
  IP_MULTICAST_VIF = 14;    // set/get IP mcast virt. iface
  IP_RSVP_ON = 15;          // enable RSVP in kernel
  IP_RSVP_OFF = 16;         // disable RSVP in kernel
  IP_RSVP_VIF_ON = 17;      // set RSVP per-vif socket
  IP_RSVP_VIF_OFF = 18;     // unset RSVP per-vif socket
  IP_PORTRANGE = 19;        // int; range to choose for unspec port
  IP_RECVIF = 20;           // bool; receive reception if w/dgram
  IP_IPSEC_POLICY = 21;     // int; set/get security policy
  IP_FAITH = 22;            // deprecated
  IP_STRIPHDR = 23;         // bool: drop receive of raw IP header
  IP_RECVTTL = 24;          // bool; receive reception TTL w/dgram
  IP_BOUND_IF = 25;         // int; set/get bound interface
  IP_PKTINFO = 26;          // get pktinfo on recv socket, set src on sent dgram
  IP_RECVTOS = 27;          // bool; receive IP TOS w/dgram
  IP_FW_ADD = 40;           // add a firewall rule to chain
  IP_FW_DEL = 41;           // delete a firewall rule from chain
  IP_FW_FLUSH = 42;         // flush firewall rule chain
  IP_FW_ZERO = 43;          // clear single/all firewall counter(s)
  IP_FW_GET = 44;           // get entire firewall rule chain
  IP_FW_RESETLOG = 45;      // reset logging counters
  IP_OLD_FW_ADD = 50;       // add a firewall rule to chain
  IP_OLD_FW_DEL = 51;       // delete a firewall rule from chain
  IP_OLD_FW_FLUSH = 52;     // flush firewall rule chain
  IP_OLD_FW_ZERO = 53;      // clear single/all firewall counter(s)
  IP_OLD_FW_GET = 54;       // get entire firewall rule chain
  IP_NAT__XXX = 55;         // set/get NAT opts XXX Deprecated, do not use
  IP_OLD_FW_RESETLOG = 56;  // reset logging counters
  IP_DUMMYNET_CONFIGURE = 60;  // add/configure a dummynet pipe
  IP_DUMMYNET_DEL = 61;        // delete a dummynet pipe from chain
  IP_DUMMYNET_FLUSH = 62;      // flush dummynet
  IP_DUMMYNET_GET = 64;        // get entire dummynet pipes
  IP_TRAFFIC_MGT_BACKGROUND =
      65;  // int*; get background IO flags; set background IO
  IP_MULTICAST_IFINDEX = 66;       // int*; set/get IP multicast i/f index
  IP_ADD_SOURCE_MEMBERSHIP = 70;   // join a source-specific group
  IP_DROP_SOURCE_MEMBERSHIP = 71;  // drop a single source
  IP_BLOCK_SOURCE = 72;            // block a source
  IP_UNBLOCK_SOURCE = 73;          // unblock a source
  IP_MSFILTER = 74;                // set/get filter list
  MCAST_JOIN_GROUP = 80;           // join an any-source group
  MCAST_LEAVE_GROUP = 81;          // leave all sources for group
  MCAST_JOIN_SOURCE_GROUP = 82;    // join a source-specific group
  MCAST_LEAVE_SOURCE_GROUP = 83;   // leave a single source
  MCAST_BLOCK_SOURCE = 84;         // block a source
  MCAST_UNBLOCK_SOURCE = 85;       // unblock a source
  IP_FORCE_OUT_IFP = 69;           // not implemented; use IP_BOUND_IF instead
  IP_NO_IFT_CELLULAR = 6969;       // for internal use only
  IP_OUT_IF = 9696;                // for internal use only
  IP_DEFAULT_MULTICAST_TTL = 1;    // normally limit m'casts to 1 hop
  IP_DEFAULT_MULTICAST_LOOP = 1;   // normally hear sends if a member
  IP_MIN_MEMBERSHIPS = 31;
  IP_MAX_MEMBERSHIPS = 4095;
  IP_MAX_GROUP_SRC_FILTER = 512;  // sources per group
  IP_MAX_SOCK_SRC_FILTER = 128;   // sources per socket/group
  IP_MAX_SOCK_MUTE_FILTER = 128;  // XXX no longer used
  MCAST_INCLUDE = 1;              // fmode: include these source(s)
  MCAST_EXCLUDE = 2;              // fmode: exclude these source(s)
  IP_PORTRANGE_DEFAULT = 0;       // default range
  IP_PORTRANGE_HIGH = 1;          // "high" - request firewall bypass
  IP_PORTRANGE_LOW = 2;           // "low" - vouchsafe security
  IPCTL_FORWARDING = 1;           // act as router
  IPCTL_SENDREDIRECTS = 2;        // may send redirects when forwarding
  IPCTL_DEFTTL = 3;               // default TTL
  IPCTL_DEFMTU = 4;               // default MTU
  IPCTL_RTEXPIRE = 5;             // cloned route expiration time
  IPCTL_RTMINEXPIRE = 6;          // min value for expiration time
  IPCTL_RTMAXCACHE = 7;           // trigger level for dynamic expire
  IPCTL_SOURCEROUTE = 8;          // may perform source routes
  IPCTL_DIRECTEDBROADCAST = 9;    // may re-broadcast received packets
  IPCTL_INTRQMAXLEN = 10;         // max length of netisr queue
  IPCTL_INTRQDROPS = 11;          // number of netisr q drops
  IPCTL_STATS = 12;               // ipstat structure
  IPCTL_ACCEPTSOURCEROUTE = 13;   // may accept source routed packets
  IPCTL_FASTFORWARDING = 14;      // use fast IP forwarding code
  IPCTL_KEEPFAITH = 15;           // deprecated
  IPCTL_GIF_TTL = 16;             // default TTL for gif encap packet
  IPCTL_MAXID = 17;
  _DSCP_DF = 0;     // RFC 2474
  _DSCP_CS0 = 0;    // RFC 2474
  _DSCP_CS1 = 8;    // RFC 2474
  _DSCP_CS2 = 16;   // RFC 2474
  _DSCP_CS3 = 24;   // RFC 2474
  _DSCP_CS4 = 32;   // RFC 2474
  _DSCP_CS5 = 40;   // RFC 2474
  _DSCP_CS6 = 48;   // RFC 2474
  _DSCP_CS7 = 56;   // RFC 2474
  _DSCP_EF = 46;    // RFC 2474
  _DSCP_VA = 44;    // RFC 5865
  _DSCP_AF11 = 10;  // RFC 2597
  _DSCP_AF12 = 12;  // RFC 2597
  _DSCP_AF13 = 14;  // RFC 2597
  _DSCP_AF21 = 18;  // RFC 2597
  _DSCP_AF22 = 20;  // RFC 2597
  _DSCP_AF23 = 22;  // RFC 2597
  _DSCP_AF31 = 26;  // RFC 2597
  _DSCP_AF32 = 28;  // RFC 2597
  _DSCP_AF33 = 30;  // RFC 2597
  _DSCP_AF41 = 34;  // RFC 2597
  _DSCP_AF42 = 36;  // RFC 2597
  _DSCP_AF43 = 38;  // RFC 2597
  _DSCP_52 = 52;    // Wi-Fi WMM Certification: Sigma
  _MAX_DSCP = 63;   // coded on 6 bits
  // in6.h
  IPV6_OPTIONS = 1;            // buf/ip6_opts; set/get IP6 options
  IPV6_RECVOPTS = 5;           // bool; receive all IP6 opts w/dgram
  IPV6_RECVRETOPTS = 6;        // bool; receive IP6 opts for response
  IPV6_RECVDSTADDR = 7;        // bool; receive IP6 dst addr w/dgram
  IPV6_RETOPTS = 8;            // ip6_opts; set/get IP6 options
  IPV6_SOCKOPT_RESERVED1 = 3;  // reserved for future use
  IPV6_UNICAST_HOPS = 4;       // int; IP6 hops
  IPV6_MULTICAST_IF = 9;       // __uint8_t; set/get IP6 multicast i/f
  IPV6_MULTICAST_HOPS = 10;    // __uint8_t; set/get IP6 multicast hops
  IPV6_MULTICAST_LOOP = 11;    // __uint8_t; set/get IP6 mcast loopback
  IPV6_JOIN_GROUP = 12;        // ip6_mreq; join a group membership
  IPV6_LEAVE_GROUP = 13;       // ip6_mreq; leave a group membership
  IPV6_PORTRANGE = 14;         // int; range to choose for unspec port
  ICMP6_FILTER = 18;           // icmp6_filter; icmp6 filter
  IPV6_2292PKTINFO = 19;       // bool; send/recv if, src/dst addr
  IPV6_2292HOPLIMIT = 20;      // bool; hop limit
  IPV6_2292NEXTHOP = 21;       // bool; next hop addr
  IPV6_2292HOPOPTS = 22;       // bool; hop-by-hop option
  IPV6_2292DSTOPTS = 23;       // bool; destinaion option
  IPV6_2292RTHDR = 24;         // ip6_rthdr: routing header
  IPV6_2292PKTOPTIONS = 25;
  IPV6_CHECKSUM = 26;      // int; checksum offset for raw socket
  IPV6_V6ONLY = 27;        // bool; only bind INET6 at wildcard bind
  IPV6_IPSEC_POLICY = 28;  // struct; get/set security policy
  IPV6_FAITH = 29;         // deprecated
  IPV6_FW_ADD = 30;        // add a firewall rule to chain
  IPV6_FW_DEL = 31;        // delete a firewall rule from chain
  IPV6_FW_FLUSH = 32;      // flush firewall rule chain
  IPV6_FW_ZERO = 33;       // clear single/all firewall counter(s)
  IPV6_FW_GET = 34;        // get entire firewall rule chain
  IPV6_RECVTCLASS = 35;    // bool; recv traffic class values
  IPV6_TCLASS = 36;        // int; send traffic class value
  IPV6_RTHDRDSTOPTS = 57;
  IPV6_RECVPKTINFO = 61;
  IPV6_RECVHOPLIMIT = 37;      // bool; recv hop limit
  IPV6_RECVRTHDR = 38;         // bool; recv routing header
  IPV6_RECVHOPOPTS = 39;       // bool; recv hop-by-hop option
  IPV6_RECVDSTOPTS = 40;       // bool; recv dst option after rthdr
  IPV6_RECVRTHDRDSTOPTS = 41;  // bool; recv dst option before rthdr
  IPV6_USE_MIN_MTU = 42;       // bool; send packets at the minimum MTU
  IPV6_RECVPATHMTU = 43;       // bool; notify an according MTU
  IPV6_PATHMTU = 44;
  IPV6_REACHCONF = 45;
  IPV6_3542PKTINFO = 46;    // in6_pktinfo; send if, src addr
  IPV6_3542HOPLIMIT = 47;   // int; send hop limit
  IPV6_3542NEXTHOP = 48;    // sockaddr; next hop addr
  IPV6_3542HOPOPTS = 49;    // ip6_hbh; send hop-by-hop option
  IPV6_3542DSTOPTS = 50;    // ip6_dest; send dst option befor rthdr
  IPV6_3542RTHDR = 51;      // ip6_rthdr; send routing header
  IPV6_AUTOFLOWLABEL = 59;  // bool; attach flowlabel automagically
  IPV6_DONTFRAG = 62;       // bool; disable IPv6 fragmentation
  IPV6_PREFER_TEMPADDR = 63;
  IPV6_MSFILTER = 74;               // struct __msfilterreq;
  IPV6_BOUND_IF = 125;              // int; set/get bound interface
  IPV6_NO_IFT_CELLULAR = 6969;      // for internal use only
  IPV6_OUT_IF = 9696;               // for internal use only
  IPV6_RTHDR_LOOSE = 0;             // this hop need not be a neighbor.
  IPV6_RTHDR_STRICT = 1;            // this hop must be a neighbor.
  IPV6_RTHDR_TYPE_0_SOCKET = 0;     // IPv6 routing header type 0
  IPV6_DEFAULT_MULTICAST_HOPS = 1;  // normally limit m'casts to 1 hop
  IPV6_DEFAULT_MULTICAST_LOOP = 1;  // normally hear sends if a member
  IPV6_MIN_MEMBERSHIPS = 31;
  IPV6_MAX_MEMBERSHIPS = 4095;
  IPV6_MAX_GROUP_SRC_FILTER = 512;  // sources per group
  IPV6_MAX_SOCK_SRC_FILTER = 128;   // sources per socket/group
  IPV6_PORTRANGE_DEFAULT = 0;       // default range
  IPV6_PORTRANGE_HIGH = 1;          // "high" - request firewall bypass
  IPV6_PORTRANGE_LOW = 2;           // "low" - vouchsafe security
  IPV6CTL_FORWARDING = 1;           // act as router
  IPV6CTL_SENDREDIRECTS = 2;        // may send redirects when forwarding
  IPV6CTL_DEFHLIM = 3;              // default Hop-Limit
  IPV6CTL_DEFMTU = 4;               // default MTU
  IPV6CTL_FORWSRCRT = 5;            // forward source-routed dgrams
  IPV6CTL_STATS = 6;                // stats
  IPV6CTL_MRTSTATS = 7;             // multicast forwarding stats
  IPV6CTL_MRTPROTO = 8;             // multicast routing protocol
  IPV6CTL_MAXFRAGPACKETS = 9;       // max packets reassembly queue
  IPV6CTL_SOURCECHECK = 10;         // verify source route and intf
  IPV6CTL_SOURCECHECK_LOGINT = 11;  // minimume logging interval
  IPV6CTL_ACCEPT_RTADV = 12;
  IPV6CTL_KEEPFAITH = 13;  // deprecated
  IPV6CTL_LOG_INTERVAL = 14;
  IPV6CTL_HDRNESTLIMIT = 15;
  IPV6CTL_DAD_COUNT = 16;
  IPV6CTL_AUTO_FLOWLABEL = 17;
  IPV6CTL_DEFMCASTHLIM = 18;
  IPV6CTL_GIF_HLIM = 19;  // default HLIM for gif encap packet
  IPV6CTL_KAME_VERSION = 20;
  IPV6CTL_USE_DEPRECATED = 21;  // use deprec addr (RFC2462 5.5.4)
  IPV6CTL_RR_PRUNE = 22;        // walk timer for router renumbering
  IPV6CTL_MAPPED_ADDR = 23;
  IPV6CTL_V6ONLY = 24;
  IPV6CTL_RTEXPIRE = 25;         // cloned route expiration time
  IPV6CTL_RTMINEXPIRE = 26;      // min value for expiration time
  IPV6CTL_RTMAXCACHE = 27;       // trigger level for dynamic expire
  IPV6CTL_USETEMPADDR = 32;      // use temporary addresses [RFC 4941]
  IPV6CTL_TEMPPLTIME = 33;       // preferred lifetime for tmpaddrs
  IPV6CTL_TEMPVLTIME = 34;       // valid lifetime for tmpaddrs
  IPV6CTL_AUTO_LINKLOCAL = 35;   // automatic link-local addr assign
  IPV6CTL_RIP6STATS = 36;        // raw_ip6 stats
  IPV6CTL_PREFER_TEMPADDR = 37;  // prefer temporary addr as src
  IPV6CTL_ADDRCTLPOLICY = 38;    // get/set address selection policy
  IPV6CTL_USE_DEFAULTZONE = 39;  // use default scope zone
  IPV6CTL_MAXFRAGS = 41;         // max fragments
  IPV6CTL_MCAST_PMTU = 44;       // enable pMTU discovery for mcast?
  IPV6CTL_NEIGHBORGCTHRESH = 46;
  IPV6CTL_MAXIFPREFIXES = 47;
  IPV6CTL_MAXIFDEFROUTERS = 48;
  IPV6CTL_MAXDYNROUTES = 49;
  ICMPV6CTL_ND6_ONLINKNSRFC4861 = 50;
  IPV6CTL_MAXID = 51;
}

enum Domain {
  AF_UNSPEC = 0;
  AF_UNIX = 1;
  AF_INET = 2;
  AF_IMPLINK = 3;
  AF_PUP = 4;
  AF_CHAOS = 5;
  AF_NS = 6;
  AF_ISO = 7;
  AF_ECMA = 8;
  AF_DATAKIT = 9;
  AF_CCITT = 10;
  AF_SNA = 11;
  AF_DECnet = 12;
  AF_DLI = 13;
  AF_LAT = 14;
  AF_HYLINK = 15;
  AF_APPLETALK = 16;
  AF_ROUTE = 17;
  AF_LINK = 18;
  pseudo_AF_XTP = 19;
  AF_COIP = 20;
  AF_CNT = 21;
  pseudo_AF_RTIP = 22;
  AF_IPX = 23;
  AF_SIP = 24;
  pseudo_AF_PIP = 25;
  AF_NDRV = 27;
  AF_ISDN = 28;
  pseudo_AF_KEY = 29;
  AF_INET6 = 30;
  AF_NATM = 31;
  AF_SYSTEM = 32;
  AF_NETBIOS = 33;
  AF_PPP = 34;
  pseudo_AF_HDRCMPLT = 35;
  AF_RESERVED_36 = 36;
  AF_IEEE80211 = 37;
  AF_UTUN = 38;
  AF_MULTIPATH = 39;
  AF_MAX = 40;
}

enum Protocol {
  IPPROTO_IP = 0;
  IPPROTO_ICMP = 1;
  IPPROTO_IGMP = 2;
  IPPROTO_GGP = 3;
  IPPROTO_IPV4 = 4;
  IPPROTO_TCP = 6;
  IPPROTO_ST = 7;
  IPPROTO_EGP = 8;
  IPPROTO_PIGP = 9;
  IPPROTO_RCCMON = 10;
  IPPROTO_NVPII = 11;
  IPPROTO_PUP = 12;
  IPPROTO_ARGUS = 13;
  IPPROTO_EMCON = 14;
  IPPROTO_XNET = 15;
  IPPROTO_CHAOS = 16;
  IPPROTO_UDP = 17;
  IPPROTO_MUX = 18;
  IPPROTO_MEAS = 19;
  IPPROTO_HMP = 20;
  IPPROTO_PRM = 21;
  IPPROTO_IDP = 22;
  IPPROTO_TRUNK1 = 23;
  IPPROTO_TRUNK2 = 24;
  IPPROTO_LEAF1 = 25;
  IPPROTO_LEAF2 = 26;
  IPPROTO_RDP = 27;
  IPPROTO_IRTP = 28;
  IPPROTO_TP = 29;
  IPPROTO_BLT = 30;
  IPPROTO_NSP = 31;
  IPPROTO_INP = 32;
  IPPROTO_SEP = 33;
  IPPROTO_3PC = 34;
  IPPROTO_IDPR = 35;
  IPPROTO_XTP = 36;
  IPPROTO_DDP = 37;
  IPPROTO_CMTP = 38;
  IPPROTO_TPXX = 39;
  IPPROTO_IL = 40;
  IPPROTO_IPV6 = 41;
  IPPROTO_SDRP = 42;
  IPPROTO_ROUTIN = 43;
  IPPROTO_FRAGMEN = 44;
  IPPROTO_IDRP = 45;
  IPPROTO_RSVP = 46;
  IPPROTO_GRE = 47;
  IPPROTO_MHRP = 48;
  IPPROTO_BHA = 49;
  IPPROTO_ESP = 50;
  IPPROTO_AH = 51;
  IPPROTO_INLSP = 52;
  IPPROTO_SWIPE = 53;
  IPPROTO_NHRP = 54;
  IPPROTO_ICMPV6 = 58;
  IPPROTO_NONE = 59;
  IPPROTO_DSTOPTS = 60;
  IPPROTO_AHIP = 61;
  IPPROTO_CFTP = 62;
  IPPROTO_HELLO = 63;
  IPPROTO_SATEXPA = 64;
  IPPROTO_KRYPTOLA = 65;
  IPPROTO_RVD = 66;
  IPPROTO_IPPC = 67;
  IPPROTO_ADFS = 68;
  IPPROTO_SATMON = 69;
  IPPROTO_VISA = 70;
  IPPROTO_IPCV = 71;
  IPPROTO_CPNX = 72;
  IPPROTO_CPHB = 73;
  IPPROTO_WSN = 74;
  IPPROTO_PVP = 75;
  IPPROTO_BRSATMO = 76;
  IPPROTO_ND = 77;
  IPPROTO_WBMON = 78;
  IPPROTO_WBEXPAK = 79;
  IPPROTO_EON = 80;
  IPPROTO_VMTP = 81;
  IPPROTO_SVMTP = 82;
  IPPROTO_VINES = 83;
  IPPROTO_TTP = 84;
  IPPROTO_IGP = 85;
  IPPROTO_DGP = 86;
  IPPROTO_TCF = 87;
  IPPROTO_IGRP = 88;
  IPPROTO_OSPFIGP = 89;
  IPPROTO_SRPC = 90;
  IPPROTO_LARP = 91;
  IPPROTO_MTP = 92;
  IPPROTO_AX25 = 93;
  IPPROTO_IPEIP = 94;
  IPPROTO_MICP = 95;
  IPPROTO_SCCSP = 96;
  IPPROTO_ETHERIP = 97;
  IPPROTO_ENCAP = 98;
  IPPROTO_APES = 99;
  IPPROTO_GMTP = 100;
  IPPROTO_PIM = 103;
  IPPROTO_IPCOMP = 108;
  IPPROTO_PGM = 113;
  IPPROTO_SCTP = 132;
  IPPROTO_DIVERT = 254;
  IPPROTO_RAW = 255;
  IPPROTO_MAX = 256;
  IPPROTO_DONE = 257;
  SOL_SOCKET = 65535;  // options for socket level
}

enum KEventFlag {
  EV_ADD = 0x0001;
  EV_DELETE = 0x0002;         /* delete event from kq */
  EV_ENABLE = 0x0004;         /* enable event */
  EV_DISABLE = 0x0008;        /* disable event (not reported) */
  EV_ONESHOT = 0x0010;        /* only report one occurrence */
  EV_CLEAR = 0x0020;          /* clear event state after reporting */
  EV_RECEIPT = 0x0040;        /* force immediate event output */
  EV_DISPATCH = 0x0080;       /* disable event after reporting */
  EV_UDATA_SPECIFIC = 0x0100; /* unique kevent per udata value */
  EV_VANISHED = 0x0200;       /* report that source has vanished  */
  EV_SYSFLAGS = 0xF000;       /* reserved by system */
  EV_FLAG0 = 0x1000;          /* filter-specific flag */
  EV_FLAG1 = 0x2000;          /* filter-specific flag */
}

enum KEventFilter {
  EVFILT_READ = -1;
  EVFILT_WRITE = -2;
  EVFILT_AIO = -3;      /* attached to aio requests */
  EVFILT_VNODE = -4;    /* attached to vnodes */
  EVFILT_PROC = -5;     /* attached to struct proc */
  EVFILT_SIGNAL = -6;   /* attached to struct proc */
  EVFILT_TIMER = -7;    /* timers */
  EVFILT_MACHPORT = -8; /* Mach portsets */
  EVFILT_FS = -9;       /* Filesystem events */
  EVFILT_USER = -10;    /* User events */
  EVFILT_VM = -12;      /* Virtual memory events */
  EVFILT_EXCEPT = -15;  /* Exception events */
  EVFILT_SOCK = -13;    /* Socket events */
  EVFILT_MEMORYSTATUS = -14;   /* Memorystatus events */
  EVFILT_NW_CHANNEL = -16;     /* Skywalk channel events */
  EVFILT_WORKLOOP = -17;       /* Workloop events */
  EVFILT_EXCLAVES_NOTIFICATION = -18; /* Exclave notification */
}

enum IdType {
  FUZZED_P_ALL = 0;
  FUZZED_P_PID = 1;
  FUZZED_P_PGID = 2;
}

enum RlimitWhich {
  FUZZED_RLIMIT_CPU = 0;
  FUZZED_RLIMIT_FSIZE = 1;
  FUZZED_RLIMIT_DATA = 2;
  FUZZED_RLIMIT_STACK = 3;
  FUZZED_RLIMIT_CORE = 4;
  FUZZED_RLIMIT_AS = 5;
  FUZZED_RLIMIT_MEMLOCK = 6;
  FUZZED_RLIMIT_NPROC = 7;
  FUZZED_RLIMIT_NOFILE = 8;
}

enum RUsageWho {
  RUSAGE_SELF = 0;
  RUSAGE_CHILDREN = -1;
}
