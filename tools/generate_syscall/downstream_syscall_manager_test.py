# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import io
import unittest

from sockfuzzer.tools.generate_syscall.downstream_syscall_manager import DownstreamSyscallManager
from sockfuzzer.tools.generate_syscall.downstream_syscall import DownstreamSyscall
from sockfuzzer.tools.generate_syscall.upstream_syscall import UpstreamSyscall
from sockfuzzer.tools.generate_syscall.upstream_syscall_manager import UpstreamSyscallManager

SENDMSG_DEF = "sendmsg(FileDescriptor s, RandomStruct[cast=caddr_t, struct=msghdr] msg, Flags[proto_type=MsgFlags] flags, Retval retval)"
SENDMSG_UPSTREAM = (
    "28	AUE_SENDMSG	ALL	{ int sendmsg(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }"
)
ACCEPT_DEF = "accept(FileDescriptor s, EmptyBuffer[cast=caddr_t, size_given_by=anamelen] name, Ptr[field=Socklen] anamelen, Retval retval)"
ACCEPT_UPSTREAM = "30	AUE_ACCEPT	ALL	{ int accept(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }"

TWO_PROTOS = """// Autogenerated by generate.sh

syntax = "proto2";

import "fuzz/proto/bsd_types.proto";
import "fuzz/proto/bsd_enums.proto";

message SendmsgMessage {
  required FileDescriptor s = 1;
  required bytes msg = 2;
  repeated MsgFlags flags = 3;
}

message AcceptMessage {
  required FileDescriptor s = 1;
  required uint32 anamelen = 2;
}

message BsdSyscall {
  oneof syscall {
    SendmsgMessage sendmsg = 28;
    AcceptMessage accept = 30;
  }
}
"""


class ProtobufTest(unittest.TestCase):
    # Allow larger diffs for this test
    maxDiff = None

    def test_write_protos_correct_number(self):
        sendmsg_syscall = DownstreamSyscall.from_line(SENDMSG_DEF)
        accept_syscall = DownstreamSyscall.from_line(ACCEPT_DEF)

        sendmsg_upstream = UpstreamSyscall.from_line(SENDMSG_UPSTREAM, None, None)
        accept_upstream = UpstreamSyscall.from_line(ACCEPT_UPSTREAM, None, None)
        upstream_syscall_manager = UpstreamSyscallManager(
            [sendmsg_upstream, accept_upstream]
        )

        syscalls = DownstreamSyscallManager([sendmsg_syscall, accept_syscall])
        buffer = io.StringIO()
        syscalls.write_protos(upstream_syscall_manager, buffer)
        self.assertEqual(buffer.getvalue(), TWO_PROTOS)

    def test_write_protos_correct_number_different_order(self):
        """
        Order of downstream syscalls should not affect the ordering in
        the generated protobuf file.
        """
        sendmsg_syscall = DownstreamSyscall.from_line(SENDMSG_DEF)
        accept_syscall = DownstreamSyscall.from_line(ACCEPT_DEF)

        sendmsg_upstream = UpstreamSyscall.from_line(SENDMSG_UPSTREAM, None, None)
        accept_upstream = UpstreamSyscall.from_line(ACCEPT_UPSTREAM, None, None)
        upstream_syscall_manager = UpstreamSyscallManager(
            [sendmsg_upstream, accept_upstream]
        )

        # Opposite order should yield the same result
        syscalls = DownstreamSyscallManager([accept_syscall, sendmsg_syscall])
        buffer = io.StringIO()
        syscalls.write_protos(upstream_syscall_manager, buffer)
        self.assertEqual(buffer.getvalue(), TWO_PROTOS)

    def test_write_protos_unknown_syscall(self):
        dummy_syscall = DownstreamSyscall.from_line(
            "dummy(Literal[cast=my_cast_t, value=0] val)"
        )
        upstream_syscall_manager = UpstreamSyscallManager([])
        syscalls = DownstreamSyscallManager([dummy_syscall])
        buffer = io.StringIO()
        with self.assertRaises(ValueError):
            syscalls.write_protos(upstream_syscall_manager, buffer)


if __name__ == "__main__":
    unittest.main()
