# Manually override types to work with codegen.sh

# TODO(nedwill): add support for Mach syscalls

# exit causes crashes
# exit(Int32 rval, Retval retval)

fork(Retval retval)
read(FileDescriptor fd, EmptyBuffer[cast="user_addr_t", size_given_by=nbyte] cbuf, CappedSize nbyte, Ptr[field=Declared[c_type=long]] retval)
write(FileDescriptor fd, Buffer cbuf, SizeOf[container=cbuf] nbyte, Ptr[field=Declared[c_type=long]] retval)
open(Buffer path, Flags[proto_type=OpenFlags] flags, Flags[proto_type=PermissionMode] mode, Retval retval)
sys_close(FileDescriptor fd, Retval retval)
wait4(Int32 pid, Ptr[cast="user_addr_t", field=Declared[c_type=int]] status, Int32 options, Nullptr rusage, Retval retval)
link(Buffer path, Buffer link_arg, Retval retval)
unlink(Buffer path, Retval retval)
sys_chdir(Buffer path, Retval retval)
sys_fchdir(FileDescriptor fd, Retval retval)
mknod(Buffer path, Flags[proto_type=PermissionMode] mode, Int32 dev, Retval retval)
chmod(Buffer path, Flags[proto_type=PermissionMode] mode, Retval retval)
chown(Buffer path, Int32 uid, Int32 gid, Retval retval)
getfsstat(Nullptr buf, Int32 bufsize, Int32 flags, Retval retval)
getpid(Retval retval)
setuid(UInt32 uid, Retval retval)
getuid(Retval retval)
geteuid(Retval retval)
# ptrace(Int32 req, Int32 pid, (char *) UInt64 addr, Int32 data, Retval retval)
recvmsg(FileDescriptor s, Ptr[field=Declared[c_type="struct msghdr"]] msg, Flags[proto_type=MsgFlags] flags, Retval retval)
# sendmsg(FileDescriptor s, (caddr_t) RandomStruct[struct=msghdr] msg, Flags[proto_type=MsgFlags] flags, Retval retval)
recvfrom(FileDescriptor s, EmptyBuffer[cast="void *", size_given_by=len] buf, CappedSize len, Flags[proto_type=MsgFlags] flags, EmptyArray[c_type="struct sockaddr",size_given_by=fromlenaddr] from, Ptr[cast="int *", field=CappedSize] fromlenaddr, Retval retval)
accept(FileDescriptor s, EmptyBuffer[cast=caddr_t, size_given_by=anamelen] name, Ptr[field=Socklen] anamelen, Retval retval)
getpeername(FileDescriptor fdes, EmptyBuffer[size_given_by=alen] asa, Ptr[field=Socklen] alen, Retval retval)
getsockname(FileDescriptor fdes, EmptyBuffer[size_given_by=alen] asa, Ptr[field=Socklen] alen, Retval retval)
access(Buffer path, Flags[proto_type=PermissionMode] flags, Retval retval)
chflags(Buffer[cast="char *"] path, Int32 flags, Retval retval)
fchflags(FileDescriptor fd, Int32 flags, Retval retval)
sync(Retval retval)
kill(Int32 pid, Int32 signum, Bool posix, Retval retval)
getppid(Retval retval)
sys_dup(FileDescriptor fd, Retval retval)
pipe(EmptyPipeFds retval)
getegid(Retval retval)
# sigaction(Int32 signum, RandomStruct[struct=__sigaction] nsa, Ptr[field=Declared[c_type="struct __sigaction"]] osa, Retval retval)
getgid(Retval retval)
# sigprocmask(Int32 how, Nullptr mask, Nullptr omask, Retval retval)
getlogin(EmptyBuffer[size_given_by=namelen] namebuf, CappedSize namelen, Retval retval)
setlogin(Buffer[cast="char *"] namebuf, Retval retval)
acct(Buffer[cast="char *"] path, Retval retval)
# sigpending(Nullptr osv, Retval retval)
# sigaltstack(RandomStruct[struct=sigaltstack] nss, Ptr[field=Declared[c_type="struct sigaltstack"]] oss, Retval retval)
# ioctl(Int32 fd, Literal[value=0] com, Nullptr data, Retval retval)
# reboot(Int32 opt, Buffer msg, Retval retval)
revoke(Buffer[cast="char *"] path, Retval retval)
symlink(Buffer[cast="char *"] path, Buffer[cast="char *"] link, Retval retval)
readlink(Buffer[cast="char *"] path, EmptyBuffer[size_given_by=count] buf, CappedSize count, Retval retval)
# execve(Buffer fname, Nullptr argp, Nullptr envp, Retval retval)
umask(Flags[proto_type=PermissionMode] newmask, Retval retval)
chroot(Buffer path, Retval retval)
msync(UInt64[cast=caddr_t] addr, UInt64 len, Flags[proto_type=MsyncFlags] flags, Retval retval)
munmap(UInt64[cast=caddr_t] addr, UInt64 len, Retval retval)
mprotect(UInt64[cast=caddr_t] addr, UInt64 len, Flags[proto_type=MmapProt] prot, Retval retval)
madvise(UInt64[cast=caddr_t] addr, UInt64 len, Enum[proto_type=MadviseFlags] behav, Retval retval)
mincore(UInt64[cast=user_addr_t] addr, CappedSize len, EmptyBuffer[size_given_by=len, cast="user_addr_t"] vec, Retval retval)
# getgroups(Literal[value=0] gidsetsize, Nullptr gidset, Retval retval)
# setgroups(Literal[value=0] gidsetsize, Nullptr gidset, Retval retval)
getpgrp(Retval retval)
setpgid(Int32 pid, Int32 pgid, Retval retval)
# setitimer(UInt32 which, RandomStruct[struct=itimerval] itv, Ptr[field=Declared[c_type="struct itimerval"]] oitv, Retval retval)
swapon(Retval retval)
# getitimer(UInt32 which, Ptr[field=Declared[c_type="struct itimerval"]] itv, Retval retval)
sys_getdtablesize(Retval retval)
sys_dup2(FileDescriptor from, FileDescriptor to, Retval retval)
# sys_fcntl(FileDescriptor fd, Int32 cmd, Int64 arg, Retval retval)
select(FileDescriptor nd, Ptr[field=Declared[c_type="unsigned int"]] in, Ptr[field=Declared[c_type="unsigned int"]] ou, Ptr[field=Declared[c_type="unsigned int"]] ex, RandomStruct[struct=timeval] tv, Retval retval)
fsync(FileDescriptor fd, Retval retval)
# setpriority(Int32 which, UInt32 who, Int32 prio, Retval retval)
socket(Enum[proto_type=Domain] domain, Enum[proto_type=SocketType] type, Enum[proto_type=Protocol] protocol, Retval retval)
connect(FileDescriptor s, SockAddr name, SizeOf[container=name] namelen, Retval retval)
# getpriority(Int32 which, UInt32 who, Retval retval)
bind(FileDescriptor s, SockAddr name, SizeOf[container=name] namelen, Retval retval)
setsockopt(FileDescriptor s, Enum[proto_type=Protocol] level, Enum[proto_type=SocketOptName] name, Buffer[cast=caddr_t] val, SizeOf[container=val] valsize, Retval retval)
listen(FileDescriptor s, Int32 backlog, Retval retval)
# sigsuspend(UInt32 mask, Retval retval)
gettimeofday(Ptr[field=Declared[c_type="struct timeval"]] tp, Ptr[field=Declared[c_type="struct fuzz_timezone"]] tzp, Ptr[field=Declared[c_type="unsigned long"]] mach_absolute_time, Retval retval)
getrusage(Enum[proto_type=RUsageWho] who, Ptr[field=Declared[c_type="struct rusage"]] rusage, Retval retval)
getsockopt(FileDescriptor s, Enum[proto_type=Protocol] level, Enum[proto_type=SocketOptName] name, EmptyBuffer[cast=caddr_t, size_given_by=avalsize] val, Ptr[field=Socklen] avalsize, Retval retval)
# readv(Int32 fd, Nullptr iovp, Literal[value=0] iovcnt, Ptr[field=Declared[c_type="unsigned long"]] retval)
# writev(Int32 fd, Nullptr iovp, Literal[value=0] iovcnt, Ptr[field=Declared[c_type="unsigned long"]] retval)
settimeofday(RandomStruct[struct=timeval] tv, RandomStruct[struct=fuzz_timezone] tzp, Retval retval)
fchown(FileDescriptor fd, Int32 uid, Int32 gid, Retval retval)
fchmod(FileDescriptor fd, Flags[proto_type=PermissionMode] mode, Retval retval)
setreuid(UInt32 ruid, UInt32 euid, Retval retval)
setregid(UInt32 rgid, UInt32 egid, Retval retval)
rename(Buffer[cast="char *"] from, Buffer[cast="char *"] to, Retval retval)
sys_flock(FileDescriptor fd, Flags[proto_type=FlockOp] how, Retval retval)
mkfifo(Buffer path, Flags[proto_type=PermissionMode] mode, Retval retval)
sendto(FileDescriptor s, Buffer[cast=caddr_t] buf, SizeOf[container=buf] len, Flags[proto_type=MsgFlags] flags, SockAddr to, SizeOf[container=to] tolen, Retval retval)
shutdown(FileDescriptor s, Enum[proto_type=ShutdownHow] how, Retval retval)
socketpair(Enum[proto_type=Domain] domain, Enum[proto_type=SocketType] type, Enum[proto_type=Protocol] protocol, EmptySocketPair rsv, Retval retval)
mkdir(Buffer path, Flags[proto_type=PermissionMode] mode, Retval retval)
rmdir(Buffer[cast="char *"] path, Retval retval)
# utimes(Buffer path, Nullptr tptr, Retval retval)
# futimes(Int32 fd, Nullptr tptr, Retval retval)
adjtime(RandomStruct[struct=timeval] delta, Ptr[field=Declared[c_type="struct timeval"]] olddelta, Retval retval)
gethostuuid(UUID uuid_buf, RandomStruct[struct=timespec] timeoutp, Retval retval)
setsid(Retval retval)
getpgid(Int32 pid, Retval retval)
setprivexec(Int32 flag, Retval retval)
pread(FileDescriptor fd, EmptyBuffer[cast="user_addr_t", size_given_by=nbyte] buf, CappedSize nbyte, UInt64 offset, Ptr[field=Declared[c_type=long]] retval)
pwrite(FileDescriptor fd, Buffer buf, SizeOf[container=buf] nbyte, UInt64 offset, Ptr[field=Declared[c_type=long]] retval)
# nfssvc(Int32 flag, Buffer argp, Retval retval)
# statfs(Buffer path, Ptr[field=Declared[c_type="struct statfs"]] buf, Retval retval)
# fstatfs(Int32 fd, Ptr[field=Declared[c_type="struct statfs"]] buf, Retval retval)
# unmount(Buffer path, Int32 flags, Retval retval)
# getfh(Buffer fname, RandomStruct[struct=fhandle] fhp, Retval retval)
# quotactl(Buffer path, Int32 cmd, Int32 uid, Buffer arg, Retval retval)
# mount(Buffer type, Buffer path, Int32 flags, Buffer data, Retval retval)
# csops(Int32 pid, UInt32 ops, EmptyBuffer[size_given_by=usersize] useraddr, UInt64 usersize, Retval retval)
# csops_audittoken(Int32 pid, UInt32 ops, EmptyBuffer[size_given_by=usersize] useraddr, UInt64 usersize, RandomStruct[struct=audit_token_t] uaudittoken, Retval retval)
# waitid(Enum[proto_type=IdType] idtype, UInt32 id, RandomStruct[struct=siginfo_t] infop, Int32 options, Retval retval)
# kdebug_typefilter(Nullptr addr, Nullptr size, Retval retval)
# kdebug_trace_string(UInt32 debugid, UInt64 str_id, Nullptr str, Ptr[field=Declared[c_type="unsigned long"]] retval)
# kdebug_trace64(UInt32 code, UInt64 arg1, UInt64 arg2, UInt64 arg3, UInt64 arg4, Retval retval)
# kdebug_trace(UInt32 code, UInt64 arg1, UInt64 arg2, UInt64 arg3, UInt64 arg4, Retval retval)
# setgid(UInt32 gid, Retval retval)
# setegid(UInt32 egid, Retval retval)
# seteuid(UInt32 euid, Retval retval)
# sigreturn(RandomStruct[struct=ucontext] uctx, Int32 infostyle, Nullptr token, Retval retval)
# thread_selfcounts(UInt32 kind, EmptyBuffer[size_given_by=nbytes] buf, UInt64 nbytes, Retval retval)
# fdatasync(Int32 fd, Retval retval)
# stat(Buffer path, Ptr[field=Declared[c_type="struct stat"]]] ub, Retval retval)
# sys_fstat(Int32 fd, Ptr[field=Declared[c_type="struct stat"]]] ub, Retval retval)
# lstat(Buffer path, Ptr[field=Declared[c_type="struct stat"]]] ub, Retval retval)
# pathconf(Buffer path, Int32 name, Retval retval)
# sys_fpathconf(Int32 fd, Int32 name, Retval retval)
# getrlimit(UInt32 which, Ptr[field=Declared[c_type="struct rlimit"]] rlp, Retval retval)
setrlimit(Enum[proto_type=RlimitWhich] which, RLimit rlp, Retval retval)
# getdirentries(Int32 fd, EmptyBuffer[size_given_by=count] buf, UInt32 count, Ptr[field=Declared[c_type=long]] basep, Retval retval)
# mmap(UInt64 addr, UInt64 len, Int32 prot, Int32 flags, Int32 fd, UInt64 pos, Ptr[field=Declared[c_type="unsigned long"]] retval)
# lseek(Int32 fd, UInt64 offset, Int32 whence, Ptr[field=Declared[c_type="unsigned long"]] retval)
# truncate(Buffer path, UInt64 length, Retval retval)
# ftruncate(Int32 fd, UInt64 length, Retval retval)
# sysctl(Nullptr name, Literal[value=0] namelen, Nullptr old, Nullptr oldlenp, Nullptr new_arg, Literal[value=0] newlen, Retval retval)
# mlock(UInt64 addr, UInt64 len, Retval retval)
# munlock(UInt64 addr, UInt64 len, Retval retval)
# undelete(Buffer path, Retval retval)
# open_dprotected_np(Buffer path, Int32 flags, Int32 class_arg, Int32 dpflags, Int32 mode, Retval retval)
# fsgetpath_ext(Buffer buf, SizeOf[container=buf] bufsize, Nullptr fsid, UInt64 objid, UInt32 options, Ptr[field=Declared[c_type="unsigned long"]] retval)
# getattrlist(Buffer path, Ptr[field=Declared[c_type="struct attrlist"]] alist, EmptyBuffer[size_given_by=CappedSize] attributeBuffer, UInt64 CappedSize, UInt64 options, Retval retval)
# setattrlist(Buffer path, RandomStruct[struct=attrlist] alist, Buffer attributeBuffer, SizeOf[container=attributeBuffer] CappedSize, UInt64 options, Retval retval)
# getdirentriesattr(Int32 fd, Ptr[field=Declared[c_type="struct attrlist"]] alist, EmptyBuffer[size_given_by=CappedSize] attributeBuffer, UInt64 CappedSize, Ptr[field=Declared[c_type="unsigned long"]] count, Ptr[field=Declared[c_type="unsigned long"]] basep, Ptr[field=Declared[c_type="unsigned long"]] newstate, UInt64 options, Retval retval)
# exchangedata(Buffer path1, Buffer path2, UInt64 options, Retval retval)
# searchfs(Buffer path, RandomStruct[struct=fssearchblock] searchblock, Ptr[field=Declared[c_type="unsigned int"]] nummatches, UInt32 scriptcode, UInt32 options, Ptr[field=Declared[c_type="struct searchstate"]] state, Retval retval)
# delete(Buffer path, Retval retval)
# copyfile(Buffer from, Buffer to, Int32 mode, Int32 flags, Retval retval)
# fgetattrlist(Int32 fd, Ptr[field=Declared[c_type="struct attrlist"]] alist, EmptyBuffer[size_given_by=CappedSize] attributeBuffer, UInt64 CappedSize, UInt64 options, Retval retval)
# fsetattrlist(Int32 fd, RandomStruct[struct=attrlist] alist, Buffer attributeBuffer, SizeOf[container=attributeBuffer] CappedSize, UInt64 options, Retval retval)
# poll(RandomStruct[struct=pollfd] fds, Literal[value=1] nfds, Int32 timeout, Retval retval)
# getxattr(Buffer path, Buffer attrname, EmptyBuffer[size_given_by=size] value, UInt64 size, UInt32 position, Int32 options, Ptr[field=Declared[c_type="unsigned long"]] retval)
# fgetxattr(Int32 fd, Buffer attrname, EmptyBuffer[size_given_by=size] value, UInt64 size, UInt32 position, Int32 options, Ptr[field=Declared[c_type="unsigned long"]] retval)
# setxattr(Buffer path, Buffer attrname, Buffer value, SizeOf[container=value] size, UInt32 position, Int32 options, Retval retval)
# fsetxattr(Int32 fd, Buffer attrname, Buffer value, SizeOf[container=value] size, UInt32 position, Int32 options, Retval retval)
# removexattr(Buffer path, Buffer attrname, Int32 options, Retval retval)
# fremovexattr(Int32 fd, Buffer attrname, Int32 options, Retval retval)
# listxattr(Buffer path, EmptyBuffer[size_given_by=bufsize] namebuf, UInt64 bufsize, Int32 options, Ptr[field=Declared[c_type="unsigned long"]] retval)
# flistxattr(Int32 fd, EmptyBuffer[size_given_by=bufsize] namebuf, UInt64 bufsize, Int32 options, Ptr[field=Declared[c_type="unsigned long"]] retval)
# fsctl(Buffer path, UInt64 cmd, Buffer data, UInt32 options, Retval retval)
# initgroups(UInt32 gidsetsize, Ptr[field=Declared[c_type=int]] gidset, Int32 gmuid, Retval retval)

# Carelessly find-replacing the rest!

# posix_spawn(Ptr[field=Declared[c_type=int]] pid, Buffer path, Nullptr adesc, Nullptr argv, Nullptr envp, Retval retval)
# ffsctl(Int32 fd, UInt64 cmd, Buffer data, UInt32 options, Retval retval)
# nfsclnt(Int32 flag, Nullptr argp, Retval retval)
# fhopen(RandomStruct[struct=fhandle] u_fhp, Int32 flags, Retval retval)
# minherit(UInt64 addr, UInt64 len, Int32 inherit, Retval retval)
# semsys(UInt32 which, Int32 a2, Int32 a3, Int32 a4, Int32 a5, Retval retval)
# msgsys(UInt32 which, Int32 a2, Int32 a3, Int32 a4, Int32 a5, Retval retval)
# shmsys(UInt32 which, Int32 a2, Int32 a3, Int32 a4, Retval retval)
# semctl(Int32 semid, Int32 semnum, Int32 cmd, user_addr_t arg, Retval retval)
# semget(key_t key, Int32 nsems, Int32 semflg, Retval retval)
# semop(Int32 semid, RandomStruct[struct=sembuf] sops, Int32 nsops, Retval retval)
# msgctl(Int32 msqid, Int32 cmd, RandomStruct[struct=msqid_ds] buf, Retval retval)
# msgget(key_t key, Int32 msgflg, Retval retval)
# msgsnd(Int32 msqid, void *msgp, size_t msgsz, Int32 msgflg, Retval retval)
# msgrcv(Int32 msqid, void *msgp, size_t msgsz, Int64 msgtyp, Int32 msgflg, Ptr[field=Declared[c_type="unsigned long"]] retval)
# shmat(Int32 shmid, void *shmaddr, Int32 shmflg, Ptr[field=Declared[c_type="unsigned long"]] retval)
# shmctl(Int32 shmid, Int32 cmd, RandomStruct[struct=shmid_ds] buf, Retval retval)
# shmdt(void *shmaddr, Retval retval)
# shmget(key_t key, size_t size, Int32 shmflg, Retval retval)
# shm_open(char *name, Int32 oflag, Int32 mode, Retval retval)
# shm_unlink(char *name, Retval retval)
# sem_open(char *name, Int32 oflag, Int32 mode, Int32 value, Ptr[field=Declared[c_type="unsigned long"]] retval)
# sem_close(fuzz_sem_t *sem, Retval retval)
# sem_unlink(char *name, Retval retval)
# sem_wait(fuzz_sem_t *sem, Retval retval)
# sem_trywait(fuzz_sem_t *sem, Retval retval)
# sem_post(fuzz_sem_t *sem, Retval retval)
# sys_sysctlbyname(char *name, size_t namelen, void *old, size_t *oldlenp, void *new_arg, size_t newlen, Retval retval)
# open_extended(Buffer path, Int32 flags, UInt32 uid, UInt32 gid, Int32 mode, user_addr_t xsecurity, Retval retval)
# umask_extended(Int32 newmask, user_addr_t xsecurity, Retval retval)
# stat_extended(Buffer path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size, Retval retval)
# lstat_extended(Buffer path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size, Retval retval)
# sys_fstat_extended(Int32 fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size, Retval retval)
# chmod_extended(Buffer path, UInt32 uid, UInt32 gid, Int32 mode, user_addr_t xsecurity, Retval retval)
# fchmod_extended(Int32 fd, UInt32 uid, UInt32 gid, Int32 mode, user_addr_t xsecurity, Retval retval)
# access_extended(user_addr_t entries, size_t size, user_addr_t results, UInt32 uid, Retval retval)
# settid(UInt32 uid, UInt32 gid, Retval retval)
# gettid(Ptr[field=Declared[c_type=int]] uidp, Ptr[field=Declared[c_type=int]] gidp, Retval retval)
# setsgroups(Int32 setlen, user_addr_t guidset, Retval retval)
# getsgroups(user_addr_t setlen, user_addr_t guidset, Retval retval)
# setwgroups(Int32 setlen, user_addr_t guidset, Retval retval)
# getwgroups(user_addr_t setlen, user_addr_t guidset, Retval retval)
# mkfifo_extended(Buffer path, UInt32 uid, UInt32 gid, Int32 mode, user_addr_t xsecurity, Retval retval)
# mkdir_extended(Buffer path, UInt32 uid, UInt32 gid, Int32 mode, user_addr_t xsecurity, Retval retval)
# identitysvc(Int32 opcode, user_addr_t message, Retval retval)
# shared_region_check_np(Ptr[field=Declared[c_type="unsigned long"]] start_address, Retval retval)
# vm_pressure_monitor(Int32 wait_for_pressure, Int32 nsecs_monitored, Ptr[field=Declared[c_type="unsigned int"]] pages_reclaimed, Retval retval)
# psynch_rw_longrdlock(user_addr_t rwlock, UInt32 lgenval, UInt32 ugenval, UInt32 rw_wc, Int32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_rw_yieldwrlock(user_addr_t rwlock, UInt32 lgenval, UInt32 ugenval, UInt32 rw_wc, Int32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_rw_downgrade(user_addr_t rwlock, UInt32 lgenval, UInt32 ugenval, UInt32 rw_wc, Int32 flags, Retval retval)
# psynch_rw_upgrade(user_addr_t rwlock, UInt32 lgenval, UInt32 ugenval, UInt32 rw_wc, Int32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_mutexwait(user_addr_t mutex, UInt32 mgen, UInt32 ugen, UInt64 tid, UInt32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_mutexdrop(user_addr_t mutex, UInt32 mgen, UInt32 ugen, UInt64 tid, UInt32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_cvbroad(user_addr_t cv, UInt64 cvlsgen, UInt64 cvudgen, UInt32 flags, user_addr_t mutex, UInt64 mugen, UInt64 tid, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_cvsignal(user_addr_t cv, UInt64 cvlsgen, UInt32 cvugen, Int32 thread_port, user_addr_t mutex, UInt64 mugen, UInt64 tid, UInt32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_cvwait(user_addr_t cv, UInt64 cvlsgen, UInt32 cvugen, user_addr_t mutex, UInt64 mugen, UInt32 flags, int64_t sec, UInt32 nsec, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_rw_rdlock(user_addr_t rwlock, UInt32 lgenval, UInt32 ugenval, UInt32 rw_wc, Int32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_rw_wrlock(user_addr_t rwlock, UInt32 lgenval, UInt32 ugenval, UInt32 rw_wc, Int32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_rw_unlock(user_addr_t rwlock, UInt32 lgenval, UInt32 ugenval, UInt32 rw_wc, Int32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# psynch_rw_unlock2(user_addr_t rwlock, UInt32 lgenval, UInt32 ugenval, UInt32 rw_wc, Int32 flags, Ptr[field=Declared[c_type="unsigned int"]] retval)
# getsid(Int32 pid, Retval retval)
# settid_with_pid(Int32 pid, Int32 assume, Retval retval)
# psynch_cvclrprepost(user_addr_t cv, UInt32 cvgen, UInt32 cvugen, UInt32 cvsgen, UInt32 prepocnt, UInt32 preposeq, UInt32 flags, Retval retval)
# aio_fsync(Int32 op, user_addr_t aiocbp, Retval retval)
# aio_return(user_addr_t aiocbp, Ptr[field=Declared[c_type="unsigned long"]] retval)
# aio_suspend(user_addr_t aiocblist, Int32 nent, user_addr_t timeoutp, Retval retval)
# aio_cancel(Int32 fd, user_addr_t aiocbp, Retval retval)
# aio_error(user_addr_t aiocbp, Retval retval)
# aio_read(user_addr_t aiocbp, Retval retval)
# aio_write(user_addr_t aiocbp, Retval retval)
# lio_listio(Int32 mode, user_addr_t aiocblist, Int32 nent, user_addr_t sigp, Retval retval)
# iopolicysys(Int32 cmd, void *arg, Retval retval)
# process_policy(Int32 scope, Int32 action, Int32 policy, Int32 policy_subtype, user_addr_t attrp, Int32 target_pid, UInt64 target_threadid, Retval retval)
# mlockall(Int32 how, Retval retval)
# munlockall(Int32 how, Retval retval)
# issetugid(Retval retval)
# __pthread_kill(Int32 thread_port, Int32 sig, Retval retval)
# __pthread_sigmask(Int32 how, user_addr_t set, user_addr_t oset, Retval retval)
# __sigwait(user_addr_t set, user_addr_t sig, Retval retval)
# __disable_threadsignal(Int32 value, Retval retval)
# __pthread_markcancel(Int32 thread_port, Retval retval)
# __pthread_canceled(Int32 action, Retval retval)
# __semwait_signal(Int32 cond_sem, Int32 mutex_sem, Int32 timeout, Int32 relative, int64_t tv_sec, int32_t tv_nsec, Retval retval)
# proc_info(int32_t callnum, int32_t pid, UInt32 flavor, UInt64 arg, user_addr_t buffer, int32_t CappedSize, Retval retval)
# sendfile(Int32 fd, Int32 s, UInt64 offset, Ptr[field=Declared[c_type="unsigned long"]] nbytes, RandomStruct[struct=sf_hdtr] hdtr, Int32 flags, Retval retval)
# stat64(Buffer path, Ptr[field=Declared[c_type="struct stat64"]] ub, Retval retval)
# sys_fstat64(Int32 fd, Ptr[field=Declared[c_type="struct stat64"]] ub, Retval retval)
# lstat64(Buffer path, Ptr[field=Declared[c_type="struct stat64"]] ub, Retval retval)
# stat64_extended(Buffer path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size, Retval retval)
# lstat64_extended(Buffer path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size, Retval retval)
# sys_fstat64_extended(Int32 fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size, Retval retval)
# getdirentries64(Int32 fd, void *buf, user_size_t bufsize, Ptr[field=Declared[c_type="unsigned long"]] position, Ptr[field=Declared[c_type="unsigned long"]] retval)
# statfs64(Buffer path, RandomStruct[struct=statfs64] buf, Retval retval)
# fstatfs64(Int32 fd, RandomStruct[struct=statfs64] buf, Retval retval)
# getfsstat64(EmptyBuffer[size_given_by=bufsize] buf, Int32 bufsize, Int32 flags, Retval retval)
# __pthread_chdir(Buffer path, Retval retval)
# __pthread_fchdir(Int32 fd, Retval retval)
# audit(void *record, Int32 length, Retval retval)
# auditon(Int32 cmd, void *data, Int32 length, Retval retval)
# getauid(au_Ptr[field=Declared[c_type=int]] auid, Retval retval)
# setauid(au_Ptr[field=Declared[c_type=int]] auid, Retval retval)
# getaudit_addr(RandomStruct[struct=auditinfo_addr] auditinfo_addr, Int32 length, Retval retval)
# setaudit_addr(RandomStruct[struct=auditinfo_addr] auditinfo_addr, Int32 length, Retval retval)
# auditctl(Buffer path, Retval retval)
# bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, UInt32 flags, Ptr[field=Declared[c_type="unsigned long"]] retval)
# bsdthread_terminate(user_addr_t stackaddr, size_t freesize, UInt32 port, user_addr_t sema_or_ulock, Retval retval)
kqueue(Retval retval)
# kevent(Int32 fd, RandomStruct[struct=kevent] changelist, Int32 nchanges, RandomStruct[struct=kevent] eventlist, Int32 nevents, RandomStruct[struct=timespec] timeout, Retval retval)
# lchown(Buffer path, UInt32 owner, UInt32 group, Retval retval)
# bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, UInt32 flags, user_addr_t stack_addr_hint, user_addr_t targetconc_ptr, UInt32 dispatchqueue_offset, UInt32 tsd_offset, Retval retval)
# workq_open(Retval retval)
# workq_kernreturn(Int32 options, user_addr_t item, Int32 affinity, Int32 prio, Retval retval)
# kevent64(Int32 fd, RandomStruct[struct=kevent64_s] changelist, Int32 nchanges, RandomStruct[struct=kevent64_s] eventlist, Int32 nevents, Int32 flags, RandomStruct[struct=timespec] timeout, Retval retval)
# __old_semwait_signal(Int32 cond_sem, Int32 mutex_sem, Int32 timeout, Int32 relative, RandomStruct[struct=timespec] ts, Retval retval)
# __old_semwait_signal_nocancel(Int32 cond_sem, Int32 mutex_sem, Int32 timeout, Int32 relative, RandomStruct[struct=timespec] ts, Retval retval)
# thread_selfid(Ptr[field=Declared[c_type="unsigned long"]] retval)
# ledger(Int32 cmd, Nullptr arg1, Nullptr arg2, Nullptr arg3, Retval retval)
# kevent_qos(Int32 fd, RandomStruct[struct=kevent_qos_s] changelist, Int32 nchanges, RandomStruct[struct=kevent_qos_s] eventlist, Int32 nevents, void *data_out, size_t *data_available, Int32 flags, Retval retval)
# kevent_id(UInt64 id, RandomStruct[struct=kevent_qos_s] changelist, Int32 nchanges, RandomStruct[struct=kevent_qos_s] eventlist, Int32 nevents, void *data_out, size_t *data_available, Int32 flags, Retval retval)
# __mac_execve(char *fname, char **argp, char **envp, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_syscall(char *policy, Int32 call, user_addr_t arg, Retval retval)
# __mac_get_file(Buffer path_p, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_set_file(Buffer path_p, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_get_link(Buffer path_p, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_set_link(Buffer path_p, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_get_proc(RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_set_proc(RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_get_fd(Int32 fd, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_set_fd(Int32 fd, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_get_pid(Int32 pid, RandomStruct[struct=mac] mac_p, Retval retval)
# pselect(Int32 nd, Ptr[field=Declared[c_type="unsigned int"]] in, Ptr[field=Declared[c_type="unsigned int"]] ou, Ptr[field=Declared[c_type="unsigned int"]] ex, RandomStruct[struct=timespec] ts, Ptr[field=Declared[c_type="unsigned int"]] mask, Retval retval)
# pselect_nocancel(Int32 nd, Ptr[field=Declared[c_type="unsigned int"]] in, Ptr[field=Declared[c_type="unsigned int"]] ou, Ptr[field=Declared[c_type="unsigned int"]] ex, RandomStruct[struct=timespec] ts, Ptr[field=Declared[c_type="unsigned int"]] mask, Retval retval)
read_nocancel(FileDescriptor fd, EmptyBuffer[cast="user_addr_t", size_given_by=nbyte] cbuf, CappedSize nbyte, Ptr[field=Declared[c_type=long]] retval)
write_nocancel(FileDescriptor fd, Buffer cbuf, SizeOf[container=cbuf] nbyte, Ptr[field=Declared[c_type=long]] retval)
open_nocancel(Buffer path, Int32 flags, Int32 mode, Retval retval)
sys_close_nocancel(FileDescriptor fd, Retval retval)
wait4_nocancel(Int32 pid, Ptr[cast="user_addr_t", field=Declared[c_type=int]] status, Int32 options, Nullptr rusage, Retval retval)
recvmsg_nocancel(FileDescriptor s, Ptr[field=Declared[c_type="struct msghdr"]] msg, Flags[proto_type=MsgFlags] flags, Retval retval)

# TODO(nedwill): model msghdr so we do not segfault when reading pointers from it
# sendmsg_nocancel(FileDescriptor s, (caddr_t) RandomStruct[struct=msghdr] msg, Flags[proto_type=MsgFlags] flags, Retval retval)

recvfrom_nocancel(FileDescriptor s, EmptyBuffer[cast="void *", size_given_by=len] buf, CappedSize len, Flags[proto_type=MsgFlags] flags, Nullptr[cast="struct sockaddr *"] from, Nullptr[cast="int *"] fromlenaddr, Retval retval)
accept_nocancel(FileDescriptor s, EmptyBuffer[cast=caddr_t, size_given_by=anamelen] name, Ptr[field=Socklen] anamelen, Retval retval)
# msync_nocancel(Nullptr addr, size_t len, Int32 flags, Retval retval)
# sys_fcntl_nocancel(Int32 fd, Int32 cmd, Int64 arg, Retval retval)
# select_nocancel(Int32 nd, Ptr[field=Declared[c_type="unsigned int"]] in, Ptr[field=Declared[c_type="unsigned int"]] ou, Ptr[field=Declared[c_type="unsigned int"]] ex, RandomStruct[struct=timeval] tv, Retval retval)
# fsync_nocancel(Int32 fd, Retval retval)
connect_nocancel(FileDescriptor s, SockAddr name, SizeOf[container=name] namelen, Retval retval)
# sigsuspend_nocancel(UInt32 mask, Retval retval)
# readv_nocancel(Int32 fd, RandomStruct[struct=iovec] iovp, UInt32 iovcnt, Ptr[field=Declared[c_type="unsigned long"]] retval)
# writev_nocancel(Int32 fd, RandomStruct[struct=iovec] iovp, UInt32 iovcnt, Ptr[field=Declared[c_type="unsigned long"]] retval)
sendto_nocancel(FileDescriptor s, Buffer[cast=caddr_t] buf, SizeOf[container=buf] len, Flags[proto_type=MsgFlags] flags, SockAddr to, SizeOf[container=to] tolen, Retval retval)
pread_nocancel(FileDescriptor fd, EmptyBuffer[cast="user_addr_t", size_given_by=nbyte] buf, CappedSize nbyte, UInt64 offset, Ptr[field=Declared[c_type=long]] retval)
pwrite_nocancel(FileDescriptor fd, Buffer buf, SizeOf[container=buf] nbyte, UInt64 offset, Ptr[field=Declared[c_type=long]] retval)
# waitid_nocancel(Enum[proto_type=IdType] idtype, UInt32 id, siginfo_t *infop, Int32 options, Retval retval)
# poll_nocancel(RandomStruct[struct=pollfd] fds, UInt32 nfds, Int32 timeout, Retval retval)
# msgsnd_nocancel(Int32 msqid, void *msgp, size_t msgsz, Int32 msgflg, Retval retval)
# msgrcv_nocancel(Int32 msqid, void *msgp, size_t msgsz, Int64 msgtyp, Int32 msgflg, Ptr[field=Declared[c_type="unsigned long"]] retval)
# sem_wait_nocancel(fuzz_sem_t *sem, Retval retval)
# aio_suspend_nocancel(user_addr_t aiocblist, Int32 nent, user_addr_t timeoutp, Retval retval)
# __sigwait_nocancel(user_addr_t set, user_addr_t sig, Retval retval)
# __semwait_signal_nocancel(Int32 cond_sem, Int32 mutex_sem, Int32 timeout, Int32 relative, int64_t tv_sec, int32_t tv_nsec, Retval retval)
# __mac_mount(char *type, Buffer path, Int32 flags, Nullptr data, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_get_mount(Buffer path, RandomStruct[struct=mac] mac_p, Retval retval)
# __mac_getfsstat(user_addr_t buf, Int32 bufsize, user_addr_t mac, Int32 macsize, Int32 flags, Retval retval)
# fsgetpath(user_addr_t buf, size_t bufsize, user_addr_t fsid, UInt64 objid, Ptr[field=Declared[c_type="unsigned long"]] retval)
# audit_session_self(mach_port_name_t *retval)
# audit_session_join(mach_port_name_t port, Retval retval)
# sys_fileport_makeport(Int32 fd, user_addr_t portnamep, Retval retval)
# sys_fileport_makefd(mach_port_name_t port, Retval retval)
# audit_session_port(au_asUInt32 asid, user_addr_t portnamep, Retval retval)
# pid_suspend(Int32 pid, Retval retval)
# pid_resume(Int32 pid, Retval retval)
# pid_shutdown_sockets(Int32 pid, Int32 level, Retval retval)
# shared_region_map_and_slide_np(Int32 fd, UInt32 count, RandomStruct[struct=shared_file_mapping_np] mappings, UInt32 slide, uint64_t*slide_start, UInt32 slide_size, Retval retval)
# kas_info(Int32 selector, void *value, size_t *size, Retval retval)
# memorystatus_control(UInt32 command, int32_t pid, UInt32 flags, user_addr_t buffer, size_t CappedSize, Retval retval)
# guarded_open_np(Buffer path, guardPtr[field=Declared[c_type=int]] guard, UInt32 guardflags, Int32 flags, Int32 mode, Retval retval)
# guarded_close_np(Int32 fd, guardPtr[field=Declared[c_type=int]] guard, Retval retval)
# guarded_kqueue_np(guardPtr[field=Declared[c_type=int]] guard, UInt32 guardflags, Retval retval)
# change_fdguard_np(Int32 fd, guardPtr[field=Declared[c_type=int]] guard, UInt32 guardflags, guardPtr[field=Declared[c_type=int]] nguard, UInt32 nguardflags, Ptr[field=Declared[c_type=int]] fdflagsp, Retval retval)
# usrctl(UInt32 flags, Retval retval)
# proc_rlimit_control(Int32 pid, Int32 flavor, void *arg, Retval retval)
# connectx(Int32 socket, sa_endpoints_t *endpoints, Enum[proto_type=SaeAssocID] associd, Int32 flags, RandomStruct[struct=iovec] iov, Int32 iovcnt, size_t *len, sae_connPtr[field=Declared[c_type=int]] connid, Retval retval)
# disconnectx(FileDescriptor s, Enum[proto_type=SaeAssocID] aid, UInt32 cid, Retval retval)
peeloff(FileDescriptor s, Enum[proto_type=SaeAssocID] aid, Retval retval)
socket_delegate(Enum[proto_type=Domain] domain, Enum[proto_type=SocketType] type, Enum[proto_type=Protocol] protocol, Int32 epid, Retval retval)
# telemetry(UInt64 cmd, UInt64 deadline, UInt64 interval, UInt64 leeway, UInt64 arg4, UInt64 arg5, Retval retval)
# proc_uuid_policy(UInt32 operation, uUInt32 uuid, size_t uuidlen, UInt32 flags, Retval retval)
# memorystatus_get_level(user_addr_t level, Retval retval)
# system_override(UInt64 timeout, UInt64 flags, Retval retval)
# vfs_purge(Retval retval)
# sfi_ctl(UInt32 operation, UInt32 sfi_class, UInt64 time, Ptr[field=Declared[c_type="unsigned long"]] out_time, Retval retval)
# sfi_pidctl(UInt32 operation, Int32 pid, UInt32 sfi_flags, Ptr[field=Declared[c_type="unsigned int"]] out_sfi_flags, Retval retval)
# coalition(UInt32 operation, Ptr[field=Declared[c_type="unsigned long"]] cid, UInt32 flags, Retval retval)
# coalition_info(UInt32 flavor, Ptr[field=Declared[c_type="unsigned long"]] cid, void *buffer, size_t *bufsize, Retval retval)
necp_match_policy(EmptyBuffer[cast="uint8_t *", size_given_by=parameters_size] parameters, CappedSize parameters_size, RandomStruct[struct=necp_aggregate_result] returned_result, Retval retval)
# getattrlistbulk(Int32 dirfd, RandomStruct[struct=attrlist] alist, void *attributeBuffer, size_t CappedSize, UInt64 options, Retval retval)
# clonefileat(Int32 src_dirfd, user_addr_t src, Int32 dst_dirfd, user_addr_t dst, UInt32 flags, Retval retval)
# openat(Int32 fd, Buffer path, Int32 flags, Int32 mode, Retval retval)
# openat_nocancel(Int32 fd, Buffer path, Int32 flags, Int32 mode, Retval retval)
# renameat(Int32 fromfd, char *from, Int32 tofd, char *to, Retval retval)
# faccessat(Int32 fd, Buffer path, Int32 amode, Int32 flag, Retval retval)
# fchmodat(Int32 fd, Buffer path, Int32 mode, Int32 flag, Retval retval)
# fchownat(Int32 fd, Buffer path, UInt32 uid, UInt32 gid, Int32 flag, Retval retval)
# fstatat(Int32 fd, Buffer path, user_addr_t ub, Int32 flag, Retval retval)
# fstatat64(Int32 fd, Buffer path, user_addr_t ub, Int32 flag, Retval retval)
# linkat(Int32 fd1, Buffer path, Int32 fd2, user_addr_t link, Int32 flag, Retval retval)
# unlinkat(Int32 fd, Buffer path, Int32 flag, Retval retval)
# readlinkat(Int32 fd, Buffer path, user_addr_t buf, size_t bufsize, Retval retval)
# symlinkat(user_addr_t *path1, Int32 fd, Buffer path2, Retval retval)
# mkdirat(Int32 fd, Buffer path, Int32 mode, Retval retval)
# getattrlistat(Int32 fd, Buffer path, RandomStruct[struct=attrlist] alist, void *attributeBuffer, size_t CappedSize, UInt64 options, Retval retval)
# proc_trace_log(Int32 pid, UInt64 uniqueid, Retval retval)
# bsdthread_ctl(user_addr_t cmd, user_addr_t arg1, user_addr_t arg2, user_addr_t arg3, Retval retval)
# openbyid_np(user_addr_t fsid, user_addr_t objid, Int32 oflags, Retval retval)
# recvmsg_x(Int32 s, RandomStruct[struct=msghdr_x] msgp, UInt32 cnt, Int32 flags, Ptr[field=Declared[c_type="unsigned long"]] retval)
# sendmsg_x(Int32 s, RandomStruct[struct=msghdr_x] msgp, UInt32 cnt, Int32 flags, Ptr[field=Declared[c_type="unsigned long"]] retval)
# thread_selfusage(Ptr[field=Declared[c_type="unsigned long"]] retval)
# csrctl(UInt32 op, user_addr_t useraddr, user_addr_t usersize, Retval retval)
# guarded_open_dprotected_np(Buffer path, guardPtr[field=Declared[c_type=int]] guard, UInt32 guardflags, Int32 flags, Int32 dpclass, Int32 dpflags, Int32 mode, Retval retval)
# guarded_write_np(Int32 fd, guardPtr[field=Declared[c_type=int]] guard, user_addr_t cbuf, user_size_t nbyte, Ptr[field=Declared[c_type="unsigned long"]] retval)
# guarded_pwrite_np(Int32 fd, guardPtr[field=Declared[c_type=int]] guard, user_addr_t buf, user_size_t nbyte, UInt64 offset, Ptr[field=Declared[c_type="unsigned long"]] retval)
# guarded_writev_np(Int32 fd, guardPtr[field=Declared[c_type=int]] guard, RandomStruct[struct=iovec] iovp, Int32 iovcnt, Ptr[field=Declared[c_type="unsigned long"]] retval)
# renameatx_np(Int32 fromfd, char *from, Int32 tofd, char *to, UInt32 flags, Retval retval)
# mremap_encrypted(Nullptr addr, size_t len, UInt32 cryptid, UInt32 cputype, UInt32 cpusubtype, Retval retval)
# stack_snapshot_with_config(Int32 stackshot_config_version, user_addr_t stackshot_config, size_t stackshot_config_size, Retval retval)
# microstackshot(user_addr_t tracebuf, UInt32 tracebuf_size, UInt32 flags, Retval retval)
# grab_pgo_data(user_addr_t uuid, Int32 flags, user_addr_t buffer, user_ssize_t size, Ptr[field=Declared[c_type="unsigned long"]] retval)
# persona(UInt32 operation, UInt32 flags, RandomStruct[struct=kpersona_info] info, Ptr[field=Declared[c_type=int]] id, size_t *idlen, Buffer path, Retval retval)
# mach_eventlink_signal(mach_port_name_t eventlink_port, UInt64 signal_count, Ptr[field=Declared[c_type="unsigned long"]] retval)
# mach_eventlink_wait_until(mach_port_name_t eventlink_port, UInt64 wait_count, UInt64 deadline, UInt32 clock_id, UInt32 option, Ptr[field=Declared[c_type="unsigned long"]] retval)
# mach_eventlink_signal_wait_until(mach_port_name_t eventlink_port, UInt64 wait_count, UInt64 signal_count, UInt64 deadline, UInt32 clock_id, UInt32 option, Ptr[field=Declared[c_type="unsigned long"]] retval)
# work_interval_ctl(UInt32 operation, UInt64 work_interval_id, void *arg, size_t len, Retval retval)
# getentropy(void *buffer, size_t size, Retval retval)
necp_open(Flags[proto_type=NecpOpenFlag] flags, Retval retval)
# necp_client_action(Int32 necp_fd, UInt32 action, uUInt32 client_id, size_t client_id_len, uint8_t *buffer, size_t buffer_size, Retval retval)
# sys_ulock_wait(UInt32 operation, void *addr, UInt64 value, UInt32 timeout, Retval retval)
# sys_ulock_wake(UInt32 operation, void *addr, UInt64 wake_value, Retval retval)
# fclonefileat(Int32 src_fd, Int32 dst_dirfd, user_addr_t dst, UInt32 flags, Retval retval)
# fs_snapshot(UInt32 op, Int32 dirfd, user_addr_t name1, user_addr_t name2, user_addr_t data, UInt32 flags, Retval retval)
# terminate_with_payload(Int32 pid, UInt32 reason_namespace, UInt64 reason_code, void *payload, UInt32 payload_size, char *reason_string, UInt64 reason_flags, Retval retval)
# abort_with_payload(UInt32 reason_namespace, UInt64 reason_code, void *payload, UInt32 payload_size, char *reason_string, UInt64 reason_flags, void *retval)
necp_session_open(Int32 flags, Retval retval)
# necp_session_action(Int32 necp_fd, UInt32 action, uint8_t *in_buffer, size_t in_buffer_length, uint8_t *out_buffer, size_t out_buffer_length, Retval retval)
# setattrlistat(Int32 fd, Buffer path, RandomStruct[struct=attrlist] alist, void *attributeBuffer, size_t CappedSize, UInt32 options, Retval retval)
# net_qos_guideline(RandomStruct[struct=net_qos_param] param, UInt32 param_len, Retval retval)
# fmount(char *type, Int32 fd, Int32 flags, void *data, Retval retval)
# ntp_adjtime(RandomStruct[struct=timex] tp, Retval retval)
# ntp_gettime(RandomStruct[struct=ntptimeval] ntvp, Retval retval)
# os_fault_with_payload(UInt32 reason_namespace, UInt64 reason_code, void *payload, UInt32 payload_size, char *reason_string, UInt64 reason_flags, Retval retval)
# kqueue_workloop_ctl(user_addr_t cmd, UInt64 options, user_addr_t addr, size_t sz, Retval retval)
# __mach_bridge_remote_time(UInt64 local_timestamp, Ptr[field=Declared[c_type="unsigned long"]] retval)
# coalition_ledger(UInt32 operation, Ptr[field=Declared[c_type="unsigned long"]] cid, void *buffer, size_t *bufsize, Retval retval)
# log_data(Int32 tag, Int32 flags, void *buffer, Int32 size, Retval retval)
# memorystatus_available_memory(Ptr[field=Declared[c_type="unsigned long"]] retval)
# shared_region_map_and_slide_2_np(UInt32 files_count, RandomStruct[struct=shared_file_np] files, UInt32 mappings_count, RandomStruct[struct=shared_file_mapping_slide_np] mappings, Retval retval)
# pivot_root(char *new_rootfs_path_before, char *old_rootfs_path_after, Retval retval)
# task_inspect_for_pid(mach_port_name_t target_tport, Int32 pid, mach_port_name_t *t, Retval retval)
# task_read_for_pid(mach_port_name_t target_tport, Int32 pid, mach_port_name_t *t, Retval retval)
# sys_preadv(Int32 fd, RandomStruct[struct=iovec] iovp, Int32 iovcnt, UInt64 offset, Ptr[field=Declared[c_type="unsigned long"]] retval)
# sys_pwritev(Int32 fd, RandomStruct[struct=iovec] iovp, Int32 iovcnt, UInt64 offset, Ptr[field=Declared[c_type="unsigned long"]] retval)
# sys_preadv_nocancel(Int32 fd, RandomStruct[struct=iovec] iovp, Int32 iovcnt, UInt64 offset, Ptr[field=Declared[c_type="unsigned long"]] retval)
# sys_pwritev_nocancel(Int32 fd, RandomStruct[struct=iovec] iovp, Int32 iovcnt, UInt64 offset, Ptr[field=Declared[c_type="unsigned long"]] retval)
# sys_ulock_wait2(UInt32 operation, void *addr, UInt64 value, UInt64 timeout, UInt64 value2, Retval retval)
# proc_info_extended_id(int32_t callnum, int32_t pid, UInt32 flavor, UInt32 flags, UInt64 ext_id, UInt64 arg, user_addr_t buffer, int32_t CappedSize, Retval retval)
# tracker_action(Int32 action, char *buffer, size_t buffer_size, Retval retval)
# debug_syscall_reject(UInt64 packed_selectors, Retval retval)
# freadlink(Int32 fd, user_addr_t buf, user_size_t bufsize, Retval retval)
